From 794ce55c58b043d07c351517a41cc89df00a2245 Mon Sep 17 00:00:00 2001
From: Gwenhael Goavec-Merou <gwenhael.goavec-merou@trabucayre.com>
Date: Thu, 18 Nov 2021 14:04:36 +0100
Subject: [PATCH] android_commands/android_common: fix print with python3

Signed-off-by: Gwenhael Goavec-Merou <gwenhael.goavec-merou@trabucayre.com>
---
 .../data/lib/asan/scripts/asan_symbolize.py      | 16 ++++++++--------
 .../data/lib/dfsan/scripts/build-libc-list.py    |  2 +-
 .../data/lib/sanitizer_common/scripts/sancov.py  |  4 ++--
 .../test/asan/android_commands/android_common.py |  2 +-
 .../asan/android_commands/android_compile.py     |  2 +-
 5 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/pythondata_software_compiler_rt/data/lib/asan/scripts/asan_symbolize.py b/pythondata_software_compiler_rt/data/lib/asan/scripts/asan_symbolize.py
index e6d43cd3..3a6821d3 100755
--- a/pythondata_software_compiler_rt/data/lib/asan/scripts/asan_symbolize.py
+++ b/pythondata_software_compiler_rt/data/lib/asan/scripts/asan_symbolize.py
@@ -84,7 +84,7 @@ class LLVMSymbolizer(Symbolizer):
       for hint in self.dsym_hints:
         cmd.append('--dsym-hint=%s' % hint)
     if DEBUG:
-      print ' '.join(cmd)
+      print(' '.join(cmd))
     try:
       result = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE)
@@ -100,7 +100,7 @@ class LLVMSymbolizer(Symbolizer):
     try:
       symbolizer_input = '"%s" %s' % (binary, offset)
       if DEBUG:
-        print symbolizer_input
+        print(symbolizer_input)
       print >> self.pipe.stdin, symbolizer_input
       while True:
         function_name = self.pipe.stdout.readline().rstrip()
@@ -146,7 +146,7 @@ class Addr2LineSymbolizer(Symbolizer):
       cmd += ['--demangle']
     cmd += ['-e', self.binary]
     if DEBUG:
-      print ' '.join(cmd)
+      print(' '.join(cmd))
     return subprocess.Popen(cmd,
                             stdin=subprocess.PIPE, stdout=subprocess.PIPE)
 
@@ -214,7 +214,7 @@ class DarwinSymbolizer(Symbolizer):
 
   def open_atos(self):
     if DEBUG:
-      print 'atos -o %s -arch %s' % (self.binary, self.arch)
+      print('atos -o %s -arch %s' % (self.binary, self.arch))
     cmdline = ['atos', '-o', self.binary, '-arch', self.arch]
     self.atos = UnbufferedLineConverter(cmdline, close_stderr=True)
 
@@ -229,7 +229,7 @@ class DarwinSymbolizer(Symbolizer):
     #   foo(type1, type2) (in object.name) (filename.cc:80)
     match = re.match('^(.*) \(in (.*)\) \((.*:\d*)\)$', atos_line)
     if DEBUG:
-      print 'atos_line: ', atos_line
+      print('atos_line: ', atos_line)
     if match:
       function_name = match.group(1)
       function_name = re.sub('\(.*?\)', '', function_name)
@@ -343,7 +343,7 @@ class BreakpadSymbolizer(Symbolizer):
       function_name, file_name, line_no = res
       result = ['%s in %s %s:%d' % (
           addr, function_name, file_name, line_no)]
-      print result
+      print(result)
       return result
     else:
       return None
@@ -425,7 +425,7 @@ class SymbolizationLoop(object):
     self.frame_no = 0
     for line in logfile:
       processed = self.process_line(line)
-      print '\n'.join(processed)
+      print('\n'.join(processed))
 
   def process_line_echo(self, line):
     return [line.rstrip()]
@@ -439,7 +439,7 @@ class SymbolizationLoop(object):
     if not match:
       return [self.current_line]
     if DEBUG:
-      print line
+      print(line)
     _, frameno_str, addr, binary, offset = match.groups()
     if frameno_str == '0':
       # Assume that frame #0 is the first frame of new stack trace.
diff --git a/pythondata_software_compiler_rt/data/lib/dfsan/scripts/build-libc-list.py b/pythondata_software_compiler_rt/data/lib/dfsan/scripts/build-libc-list.py
index eddb6c07..13ea25fd 100755
--- a/pythondata_software_compiler_rt/data/lib/dfsan/scripts/build-libc-list.py
+++ b/pythondata_software_compiler_rt/data/lib/dfsan/scripts/build-libc-list.py
@@ -93,4 +93,4 @@ functions = list(set(functions))
 functions.sort()
 
 for f in functions:
-  print 'fun:%s=uninstrumented' % f
+  print('fun:%s=uninstrumented' % f)
diff --git a/pythondata_software_compiler_rt/data/lib/sanitizer_common/scripts/sancov.py b/pythondata_software_compiler_rt/data/lib/sanitizer_common/scripts/sancov.py
index a5ae9574..a63277dc 100755
--- a/pythondata_software_compiler_rt/data/lib/sanitizer_common/scripts/sancov.py
+++ b/pythondata_software_compiler_rt/data/lib/sanitizer_common/scripts/sancov.py
@@ -84,7 +84,7 @@ def PrintFiles(files):
     print >> sys.stderr, "%s: 1 file merged; %d PCs total" % \
       (prog_name, len(s))
   for i in s:
-    print "0x%x" % i
+    print("0x%x" % i)
 
 def MergeAndPrint(files):
   if sys.stdout.isatty():
@@ -210,7 +210,7 @@ def PrintMissing(binary):
     print >> sys.stderr, \
         "%s: WARNING: stdin contains PCs not found in binary" % prog_name
   for pc in sorted(missing):
-    print "0x%x" % pc
+    print("0x%x" % pc)
 
 if __name__ == '__main__':
   prog_name = sys.argv[0]
diff --git a/pythondata_software_compiler_rt/data/test/asan/android_commands/android_common.py b/pythondata_software_compiler_rt/data/test/asan/android_commands/android_common.py
index 43ac7b48..90438fa5 100644
--- a/pythondata_software_compiler_rt/data/test/asan/android_commands/android_common.py
+++ b/pythondata_software_compiler_rt/data/test/asan/android_commands/android_common.py
@@ -10,7 +10,7 @@ if os.environ.get('ANDROID_RUN_VERBOSE') == '1':
 
 def adb(args):
     if verbose:
-        print args
+        print(args)
     devnull = open(os.devnull, 'w')
     return subprocess.call([ADB] + args, stdout=devnull, stderr=subprocess.STDOUT)
 
diff --git a/pythondata_software_compiler_rt/data/test/asan/android_commands/android_compile.py b/pythondata_software_compiler_rt/data/test/asan/android_commands/android_compile.py
index 4b880886..02502d23 100755
--- a/pythondata_software_compiler_rt/data/test/asan/android_commands/android_compile.py
+++ b/pythondata_software_compiler_rt/data/test/asan/android_commands/android_compile.py
@@ -21,7 +21,7 @@ while args:
         output = args.pop(0)
 
 if output == None:
-    print "No output file name!"
+    print("No output file name!")
     sys.exit(1)
 
 ret = subprocess.call(sys.argv[1:])
-- 
2.32.0

