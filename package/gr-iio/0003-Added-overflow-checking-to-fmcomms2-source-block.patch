From 3b5dfbf832bf8e369cf9a4abd78993645b649007 Mon Sep 17 00:00:00 2001
From: Travis Collins <travis.collins@analog.com>
Date: Thu, 22 Mar 2018 15:34:55 -0400
Subject: [PATCH 1/3] Added overflow checking to fmcomms2 source block.

Signed-off-by: Travis Collins <travis.collins@analog.com>
---
 include/iio/fmcomms2_source.h |  4 ++++
 lib/device_source_impl.h               |  3 ++-
 lib/fmcomms2_source_impl.cc            | 30 ++++++++++++++++++++++++++
 lib/fmcomms2_source_impl.h             |  5 +++++
 4 files changed, 41 insertions(+), 1 deletion(-)

Index: gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/include/iio/fmcomms2_source.h
===================================================================
--- gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb.orig/include/iio/fmcomms2_source.h
+++ gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/include/iio/fmcomms2_source.h
@@ -77,6 +77,9 @@ namespace gr {
 		      const char *gain2, double gain2_value,
 		      const char *rf_port_select,
 		      const char *filter = "", bool auto_filter = true) = 0;
+
+     private:
+      void check_overflow(void);
     };
 
     class IIO_API fmcomms2_source_f32c : virtual public gr::hier_block2
@@ -121,6 +124,7 @@ namespace gr {
       }
     private:
       fmcomms2_source::sptr fmcomms2_block;
+      void check_overflow(void);
 
     protected:
       explicit fmcomms2_source_f32c(bool rx1_en, bool rx2_en,
Index: gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/lib/device_source_impl.h
===================================================================
--- gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb.orig/lib/device_source_impl.h
+++ gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/lib/device_source_impl.h
@@ -48,7 +48,7 @@ namespace gr {
 	     boost::condition_variable iio_cond, iio_cond2;
 	     unsigned long items_in_buffer;
 	     off_t byte_offset;
-	     volatile bool please_refill_buffer, thread_stopped;
+	     volatile bool please_refill_buffer;
 	     pmt::pmt_t port_id;
 
 	     boost::thread refill_thd;
@@ -65,6 +65,7 @@ namespace gr {
 	     unsigned int buffer_size;
 	     unsigned int decimation;
 	     bool destroy_ctx;
+	     volatile bool thread_stopped;
 
      public:
       device_source_impl(struct iio_context *ctx, bool destroy_ctx,
Index: gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/lib/fmcomms2_source_impl.cc
===================================================================
--- gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb.orig/lib/fmcomms2_source_impl.cc
+++ gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/lib/fmcomms2_source_impl.cc
@@ -140,6 +140,36 @@ namespace gr {
 	    set_params(frequency, samplerate, bandwidth, quadrature, rfdc, bbdc,
 			    gain1, gain1_value, gain2, gain2_value,
 			    port_select, filter, auto_filter);
+
+	    overflow_thd = boost::thread(&fmcomms2_source_impl::check_overflow, this);
+    }
+
+
+    void fmcomms2_source_impl::check_overflow(void)
+    {
+	    uint32_t status;
+	    int ret;
+
+	    // Wait for stream startup
+	    while(thread_stopped) {sleep(1);}
+	    sleep(1);
+
+	    // Clear status registers
+	    iio_device_reg_write(dev, 0x80000088, 0x6);
+
+	    while (!thread_stopped) {
+		    ret = iio_device_reg_read(dev, 0x80000088, &status);
+		    if (ret) {
+			    throw std::runtime_error("Failed to read overflow status register");
+		    }
+		    if (status & 4) {
+			    printf("O");
+			    // Clear status registers
+			    iio_device_reg_write(dev, 0x80000088, 0x6);
+		    }
+		    usleep(1000);
+	    }
+
     }
 
     void fmcomms2_source_impl::set_params(unsigned long long frequency,
Index: gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/lib/fmcomms2_source_impl.h
===================================================================
--- gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb.orig/lib/fmcomms2_source_impl.h
+++ gr-iio-733c8a05e74b7d10fbaef502cc82d025ae35a1fb/lib/fmcomms2_source_impl.h
@@ -39,6 +39,11 @@ namespace gr {
       std::vector<std::string> get_channels_vector(
 		      bool ch1_en, bool ch2_en, bool ch3_en, bool ch4_en);
 
+      boost::thread overflow_thd;
+
+      void check_overflow(void);
+
+
      public:
       fmcomms2_source_impl(struct iio_context *ctx, bool destroy_ctx,
 		    unsigned long long frequency, unsigned long samplerate,
