Index: uhd-3.15.0.0/host/lib/rfnoc/dma_fifo_block_ctrl_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/rfnoc/dma_fifo_block_ctrl_impl.cpp
+++ uhd-3.15.0.0/host/lib/rfnoc/dma_fifo_block_ctrl_impl.cpp
@@ -58,7 +58,7 @@ public:
             _tree->access<int>(get_arg_path("base_addr/value", i))
                 .add_coerced_subscriber(boost::bind(&dma_fifo_block_ctrl_impl::resize,
                     this,
-                    _1,
+                    boost::placeholders::_1,
                     boost::ref(_perifs[i].depth),
                     i))
                 .set(_perifs[i].base_addr);
@@ -66,7 +66,7 @@ public:
                 .add_coerced_subscriber(boost::bind(&dma_fifo_block_ctrl_impl::resize,
                     this,
                     boost::ref(_perifs[i].base_addr),
-                    _1,
+                    boost::placeholders::_1,
                     i))
                 .set(_perifs[i].depth);
         }
Index: uhd-3.15.0.0/host/lib/usrp/usrp1/io_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/usrp1/io_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/usrp1/io_impl.cpp
@@ -140,7 +140,7 @@ struct usrp1_impl::io_impl{
     io_impl(zero_copy_if::sptr data_transport):
         data_transport(data_transport),
         curr_buff(offset_send_buffer(data_transport->get_send_buff())),
-        omsb(boost::bind(&usrp1_impl::io_impl::commit_send_buff, this, _1, _2, _3)),
+        omsb(boost::bind(&usrp1_impl::io_impl::commit_send_buff, this, boost::placeholders::_1, _2, _3)),
         vandal_loop_exit(false)
     {
         /* NOP */
@@ -638,7 +638,7 @@ rx_streamer::sptr usrp1_impl::get_rx_str
     my_streamer->set_tick_rate(_master_clock_rate);
     my_streamer->set_vrt_unpacker(&usrp1_bs_vrt_unpacker);
     my_streamer->set_xport_chan_get_buff(0, boost::bind(
-        &uhd::transport::zero_copy_if::get_recv_buff, _io_impl->data_transport, _1
+        &uhd::transport::zero_copy_if::get_recv_buff, _io_impl->data_transport, boost::placeholders::_1
     ));
 
     //set the converter
@@ -687,7 +687,7 @@ tx_streamer::sptr usrp1_impl::get_tx_str
     const size_t spp = bpp/convert::get_bytes_per_item(args.otw_format);
 
     //make the new streamer given the samples per packet
-    boost::function<void(bool)> tx_fcn = boost::bind(&usrp1_impl::tx_stream_on_off, this, _1);
+    boost::function<void(bool)> tx_fcn = boost::bind(&usrp1_impl::tx_stream_on_off, this, boost::placeholders::_1);
     boost::shared_ptr<usrp1_send_packet_streamer> my_streamer =
         boost::make_shared<usrp1_send_packet_streamer>(spp, _soft_time_ctrl, tx_fcn);
 
@@ -695,7 +695,7 @@ tx_streamer::sptr usrp1_impl::get_tx_str
     my_streamer->set_tick_rate(_master_clock_rate);
     my_streamer->set_vrt_packer(&usrp1_bs_vrt_packer);
     my_streamer->set_xport_chan_get_buff(0, boost::bind(
-        &usrp1_impl::io_impl::get_send_buff, _io_impl.get(), _1
+        &usrp1_impl::io_impl::get_send_buff, _io_impl.get(), boost::placeholders::_1
     ));
 
     //set the converter
Index: uhd-3.15.0.0/host/tests/gain_group_test.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/tests/gain_group_test.cpp
+++ uhd-3.15.0.0/host/tests/gain_group_test.cpp
@@ -77,12 +77,12 @@ static gain_group::sptr get_gain_group(s
     // load gain group with function sets
     gain_fcns.get_range = boost::bind(&gain_element1::get_range, &g1);
     gain_fcns.get_value = boost::bind(&gain_element1::get_value, &g1);
-    gain_fcns.set_value = boost::bind(&gain_element1::set_value, &g1, _1);
+    gain_fcns.set_value = boost::bind(&gain_element1::set_value, &g1, boost::placeholders::_1);
     gg->register_fcns("g1", gain_fcns, pri1);
 
     gain_fcns.get_range = boost::bind(&gain_element2::get_range, &g2);
     gain_fcns.get_value = boost::bind(&gain_element2::get_value, &g2);
-    gain_fcns.set_value = boost::bind(&gain_element2::set_value, &g2, _1);
+    gain_fcns.set_value = boost::bind(&gain_element2::set_value, &g2, boost::placeholders::_1);
     gg->register_fcns("g2", gain_fcns, pri2);
 
     return gg;
Index: uhd-3.15.0.0/host/lib/transport/libusb1_zero_copy.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/transport/libusb1_zero_copy.cpp
+++ uhd-3.15.0.0/host/lib/transport/libusb1_zero_copy.cpp
@@ -259,7 +259,7 @@ public:
 
             _mb_pool.push_back(boost::make_shared<libusb_zero_copy_mb>(lut,
                 this->get_frame_size(),
-                boost::bind(&libusb_zero_copy_single::enqueue_buffer, this, _1),
+                boost::bind(&libusb_zero_copy_single::enqueue_buffer, this, boost::placeholders::_1),
                 is_recv,
                 name));
 
Index: uhd-3.15.0.0/host/lib/usrp/n230/n230_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/n230/n230_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/n230/n230_impl.cpp
@@ -305,7 +305,7 @@ void n230_impl::_initialize_property_tre
     //------------------------------------------------------------------
     _tree->create<mboard_eeprom_t>(mb_path / "eeprom")
         .set(_eeprom_mgr->get_mb_eeprom())  //Set first...
-        .add_coerced_subscriber(boost::bind(&n230_eeprom_manager::write_mb_eeprom, _eeprom_mgr, _1));  //..then enable writer
+        .add_coerced_subscriber(boost::bind(&n230_eeprom_manager::write_mb_eeprom, _eeprom_mgr, boost::placeholders::_1));  //..then enable writer
 
     //------------------------------------------------------------------
     // Create codec nodes
@@ -324,9 +324,9 @@ void n230_impl::_initialize_property_tre
     // Create clock and time control nodes
     //------------------------------------------------------------------
     _tree->create<double>(mb_path / "tick_rate")
-        .set_coercer(boost::bind(&n230_clk_pps_ctrl::set_tick_rate, _resource_mgr->get_clk_pps_ctrl_sptr(), _1))
+        .set_coercer(boost::bind(&n230_clk_pps_ctrl::set_tick_rate, _resource_mgr->get_clk_pps_ctrl_sptr(), boost::placeholders::_1))
         .set_publisher(boost::bind(&n230_clk_pps_ctrl::get_tick_rate, _resource_mgr->get_clk_pps_ctrl_sptr()))
-        .add_coerced_subscriber(boost::bind(&n230_stream_manager::update_tick_rate, _stream_mgr, _1));
+        .add_coerced_subscriber(boost::bind(&n230_stream_manager::update_tick_rate, _stream_mgr, boost::placeholders::_1));
 
     //Register time now and pps onto available radio cores
     //radio0 is the master
@@ -338,8 +338,8 @@ void n230_impl::_initialize_property_tre
 
     //Setup time source props
     _tree->create<std::string>(mb_path / "time_source" / "value")
-        .add_coerced_subscriber(boost::bind(&n230_impl::_check_time_source, this, _1))
-        .add_coerced_subscriber(boost::bind(&n230_clk_pps_ctrl::set_pps_source, _resource_mgr->get_clk_pps_ctrl_sptr(), _1))
+        .add_coerced_subscriber(boost::bind(&n230_impl::_check_time_source, this, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&n230_clk_pps_ctrl::set_pps_source, _resource_mgr->get_clk_pps_ctrl_sptr(), boost::placeholders::_1))
         .set(n230::DEFAULT_TIME_SRC);
     const std::vector<std::string> time_sources{"none", "external", "gpsdo"};
     _tree->create<std::vector<std::string> >(mb_path / "time_source" / "options")
@@ -347,8 +347,8 @@ void n230_impl::_initialize_property_tre
 
     //Setup reference source props
     _tree->create<std::string>(mb_path / "clock_source" / "value")
-        .add_coerced_subscriber(boost::bind(&n230_impl::_check_clock_source, this, _1))
-        .add_coerced_subscriber(boost::bind(&n230_clk_pps_ctrl::set_clock_source, _resource_mgr->get_clk_pps_ctrl_sptr(), _1))
+        .add_coerced_subscriber(boost::bind(&n230_impl::_check_clock_source, this, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&n230_clk_pps_ctrl::set_clock_source, _resource_mgr->get_clk_pps_ctrl_sptr(), boost::placeholders::_1))
         .set(n230::DEFAULT_CLOCK_SRC);
     const std::vector<std::string> clock_sources{"internal", "external", "gpsdo"};
     _tree->create<std::vector<std::string> >(mb_path / "clock_source" / "options")
@@ -361,10 +361,10 @@ void n230_impl::_initialize_property_tre
     //------------------------------------------------------------------
     _tree->create<subdev_spec_t>(mb_path / "rx_subdev_spec")
         .set(subdev_spec_t())
-        .add_coerced_subscriber(boost::bind(&n230_impl::_update_rx_subdev_spec, this, _1));
+        .add_coerced_subscriber(boost::bind(&n230_impl::_update_rx_subdev_spec, this, boost::placeholders::_1));
     _tree->create<subdev_spec_t>(mb_path / "tx_subdev_spec")
         .set(subdev_spec_t())
-        .add_coerced_subscriber(boost::bind(&n230_impl::_update_tx_subdev_spec, this, _1));
+        .add_coerced_subscriber(boost::bind(&n230_impl::_update_tx_subdev_spec, this, boost::placeholders::_1));
 
     //------------------------------------------------------------------
     // Create a fake dboard to put frontends in
@@ -479,45 +479,45 @@ void n230_impl::_initialize_radio_proper
 
     //Time
     _tree->access<time_spec_t>(mb_path / "time" / "cmd")
-        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_time, perif.ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_time, perif.ctrl, boost::placeholders::_1));
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_tick_rate, perif.ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_tick_rate, perif.ctrl, boost::placeholders::_1));
     _tree->access<time_spec_t>(mb_path / "time" / "now")
-        .add_coerced_subscriber(boost::bind(&time_core_3000::set_time_now, perif.time, _1));
+        .add_coerced_subscriber(boost::bind(&time_core_3000::set_time_now, perif.time, boost::placeholders::_1));
     _tree->access<time_spec_t>(mb_path / "time" / "pps")
-        .add_coerced_subscriber(boost::bind(&time_core_3000::set_time_next_pps, perif.time, _1));
+        .add_coerced_subscriber(boost::bind(&time_core_3000::set_time_next_pps, perif.time, boost::placeholders::_1));
 
     //RX DSP
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::set_tick_rate, perif.framer, _1))
-        .add_coerced_subscriber(boost::bind(&rx_dsp_core_3000::set_tick_rate, perif.ddc, _1));
+        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::set_tick_rate, perif.framer, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&rx_dsp_core_3000::set_tick_rate, perif.ddc, boost::placeholders::_1));
     const fs_path rx_dsp_path = mb_path / "rx_dsps" / str(boost::format("%u") % instance);
     _tree->create<meta_range_t>(rx_dsp_path / "rate" / "range")
         .set_publisher(boost::bind(&rx_dsp_core_3000::get_host_rates, perif.ddc));
     _tree->create<double>(rx_dsp_path / "rate" / "value")
-        .set_coercer(boost::bind(&rx_dsp_core_3000::set_host_rate, perif.ddc, _1))
-        .add_coerced_subscriber(boost::bind(&n230_stream_manager::update_rx_samp_rate, _stream_mgr, instance, _1))
+        .set_coercer(boost::bind(&rx_dsp_core_3000::set_host_rate, perif.ddc, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&n230_stream_manager::update_rx_samp_rate, _stream_mgr, instance, boost::placeholders::_1))
         .set(n230::DEFAULT_RX_SAMP_RATE);
     _tree->create<double>(rx_dsp_path / "freq" / "value")
-        .set_coercer(boost::bind(&rx_dsp_core_3000::set_freq, perif.ddc, _1))
+        .set_coercer(boost::bind(&rx_dsp_core_3000::set_freq, perif.ddc, boost::placeholders::_1))
         .set(n230::DEFAULT_DDC_FREQ);
     _tree->create<meta_range_t>(rx_dsp_path / "freq" / "range")
         .set_publisher(boost::bind(&rx_dsp_core_3000::get_freq_range, perif.ddc));
     _tree->create<stream_cmd_t>(rx_dsp_path / "stream_cmd")
-        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::issue_stream_command, perif.framer, _1));
+        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::issue_stream_command, perif.framer, boost::placeholders::_1));
 
     //TX DSP
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&tx_dsp_core_3000::set_tick_rate, perif.duc, _1));
+        .add_coerced_subscriber(boost::bind(&tx_dsp_core_3000::set_tick_rate, perif.duc, boost::placeholders::_1));
     const fs_path tx_dsp_path = mb_path / "tx_dsps" / str(boost::format("%u") % instance);
     _tree->create<meta_range_t>(tx_dsp_path / "rate" / "range")
         .set_publisher(boost::bind(&tx_dsp_core_3000::get_host_rates, perif.duc));
     _tree->create<double>(tx_dsp_path / "rate" / "value")
-        .set_coercer(boost::bind(&tx_dsp_core_3000::set_host_rate, perif.duc, _1))
-        .add_coerced_subscriber(boost::bind(&n230_stream_manager::update_tx_samp_rate, _stream_mgr, instance, _1))
+        .set_coercer(boost::bind(&tx_dsp_core_3000::set_host_rate, perif.duc, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&n230_stream_manager::update_tx_samp_rate, _stream_mgr, instance, boost::placeholders::_1))
         .set(n230::DEFAULT_TX_SAMP_RATE);
     _tree->create<double>(tx_dsp_path / "freq" / "value")
-        .set_coercer(boost::bind(&tx_dsp_core_3000::set_freq, perif.duc, _1))
+        .set_coercer(boost::bind(&tx_dsp_core_3000::set_freq, perif.duc, boost::placeholders::_1))
         .set(n230::DEFAULT_DUC_FREQ);
     _tree->create<meta_range_t>(tx_dsp_path / "freq" / "range")
         .set_publisher(boost::bind(&tx_dsp_core_3000::get_freq_range, perif.duc));
@@ -540,7 +540,7 @@ void n230_impl::_initialize_radio_proper
             _tree->create<std::vector<std::string> >(rf_fe_path / "antenna" / "options")
                 .set({"TX/RX", "RX2"});
             _tree->create<std::string>(rf_fe_path / "antenna" / "value")
-                .add_coerced_subscriber(boost::bind(&n230_frontend_ctrl::set_antenna_sel, _resource_mgr->get_frontend_ctrl_sptr(), instance, _1))
+                .add_coerced_subscriber(boost::bind(&n230_frontend_ctrl::set_antenna_sel, _resource_mgr->get_frontend_ctrl_sptr(), instance, boost::placeholders::_1))
                 .set("RX2");
         }
         if (key[0] == 'T') {
Index: uhd-3.15.0.0/host/lib/usrp/b100/b100_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/b100/b100_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/b100/b100_impl.cpp
@@ -274,7 +274,7 @@ b100_impl::b100_impl(const device_addr_t
     _tree->create<std::string>(mb_path / "name").set("B100");
     _tree->create<std::string>(mb_path / "codename").set("B-Hundo");
     _tree->create<std::string>(mb_path / "load_eeprom")
-        .add_coerced_subscriber(boost::bind(&fx2_ctrl::usrp_load_eeprom, _fx2_ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&fx2_ctrl::usrp_load_eeprom, _fx2_ctrl, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // setup the mboard eeprom
@@ -282,7 +282,7 @@ b100_impl::b100_impl(const device_addr_t
     const mboard_eeprom_t mb_eeprom = this->get_mb_eeprom(_fx2_ctrl);
     _tree->create<mboard_eeprom_t>(mb_path / "eeprom")
         .set(mb_eeprom)
-        .add_coerced_subscriber(boost::bind(&b100_impl::set_mb_eeprom, this, _1));
+        .add_coerced_subscriber(boost::bind(&b100_impl::set_mb_eeprom, this, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // create clock control objects
@@ -290,12 +290,12 @@ b100_impl::b100_impl(const device_addr_t
     //^^^ clock created up top, just reg props here... ^^^
     _tree->create<double>(mb_path / "tick_rate")
         .set_publisher(boost::bind(&b100_clock_ctrl::get_fpga_clock_rate, _clock_ctrl))
-        .add_coerced_subscriber(boost::bind(&fifo_ctrl_excelsior::set_tick_rate, _fifo_ctrl, _1))
-        .add_coerced_subscriber(boost::bind(&b100_impl::update_tick_rate, this, _1));
+        .add_coerced_subscriber(boost::bind(&fifo_ctrl_excelsior::set_tick_rate, _fifo_ctrl, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&b100_impl::update_tick_rate, this, boost::placeholders::_1));
 
     //add_coerced_subscriber the command time while we are at it
     _tree->create<time_spec_t>(mb_path / "time/cmd")
-        .add_coerced_subscriber(boost::bind(&fifo_ctrl_excelsior::set_time, _fifo_ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&fifo_ctrl_excelsior::set_time, _fifo_ctrl, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // create codec control objects
@@ -306,12 +306,12 @@ b100_impl::b100_impl(const device_addr_t
     _tree->create<std::string>(rx_codec_path / "name").set("ad9522");
     _tree->create<meta_range_t>(rx_codec_path / "gains/pga/range").set(b100_codec_ctrl::rx_pga_gain_range);
     _tree->create<double>(rx_codec_path / "gains/pga/value")
-        .set_coercer(boost::bind(&b100_impl::update_rx_codec_gain, this, _1))
+        .set_coercer(boost::bind(&b100_impl::update_rx_codec_gain, this, boost::placeholders::_1))
         .set(0.0);
     _tree->create<std::string>(tx_codec_path / "name").set("ad9522");
     _tree->create<meta_range_t>(tx_codec_path / "gains/pga/range").set(b100_codec_ctrl::tx_pga_gain_range);
     _tree->create<double>(tx_codec_path / "gains/pga/value")
-        .add_coerced_subscriber(boost::bind(&b100_codec_ctrl::set_tx_pga_gain, _codec_ctrl, _1))
+        .add_coerced_subscriber(boost::bind(&b100_codec_ctrl::set_tx_pga_gain, _codec_ctrl, boost::placeholders::_1))
         .set_publisher(boost::bind(&b100_codec_ctrl::get_tx_pga_gain, _codec_ctrl))
         .set(0.0);
 
@@ -328,27 +328,27 @@ b100_impl::b100_impl(const device_addr_t
     _tx_fe = tx_frontend_core_200::make(_fifo_ctrl, TOREG(SR_TX_FE));
 
     _tree->create<subdev_spec_t>(mb_path / "rx_subdev_spec")
-        .add_coerced_subscriber(boost::bind(&b100_impl::update_rx_subdev_spec, this, _1));
+        .add_coerced_subscriber(boost::bind(&b100_impl::update_rx_subdev_spec, this, boost::placeholders::_1));
     _tree->create<subdev_spec_t>(mb_path / "tx_subdev_spec")
-        .add_coerced_subscriber(boost::bind(&b100_impl::update_tx_subdev_spec, this, _1));
+        .add_coerced_subscriber(boost::bind(&b100_impl::update_tx_subdev_spec, this, boost::placeholders::_1));
 
     const fs_path rx_fe_path = mb_path / "rx_frontends" / "A";
     const fs_path tx_fe_path = mb_path / "tx_frontends" / "A";
 
     _tree->create<std::complex<double> >(rx_fe_path / "dc_offset" / "value")
-        .set_coercer(boost::bind(&rx_frontend_core_200::set_dc_offset, _rx_fe, _1))
+        .set_coercer(boost::bind(&rx_frontend_core_200::set_dc_offset, _rx_fe, boost::placeholders::_1))
         .set(std::complex<double>(0.0, 0.0));
     _tree->create<bool>(rx_fe_path / "dc_offset" / "enable")
-        .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_dc_offset_auto, _rx_fe, _1))
+        .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_dc_offset_auto, _rx_fe, boost::placeholders::_1))
         .set(true);
     _tree->create<std::complex<double> >(rx_fe_path / "iq_balance" / "value")
-        .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_iq_balance, _rx_fe, _1))
+        .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_iq_balance, _rx_fe, boost::placeholders::_1))
         .set(std::complex<double>(0.0, 0.0));
     _tree->create<std::complex<double> >(tx_fe_path / "dc_offset" / "value")
-        .set_coercer(boost::bind(&tx_frontend_core_200::set_dc_offset, _tx_fe, _1))
+        .set_coercer(boost::bind(&tx_frontend_core_200::set_dc_offset, _tx_fe, boost::placeholders::_1))
         .set(std::complex<double>(0.0, 0.0));
     _tree->create<std::complex<double> >(tx_fe_path / "iq_balance" / "value")
-        .add_coerced_subscriber(boost::bind(&tx_frontend_core_200::set_iq_balance, _tx_fe, _1))
+        .add_coerced_subscriber(boost::bind(&tx_frontend_core_200::set_iq_balance, _tx_fe, boost::placeholders::_1))
         .set(std::complex<double>(0.0, 0.0));
 
     ////////////////////////////////////////////////////////////////////
@@ -367,20 +367,20 @@ b100_impl::b100_impl(const device_addr_t
 
         _rx_dsps[dspno]->set_link_rate(B100_LINK_RATE_BPS);
         _tree->access<double>(mb_path / "tick_rate")
-            .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::set_tick_rate, _rx_dsps[dspno], _1));
+            .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::set_tick_rate, _rx_dsps[dspno], boost::placeholders::_1));
         fs_path rx_dsp_path = mb_path / str(boost::format("rx_dsps/%u") % dspno);
         _tree->create<meta_range_t>(rx_dsp_path / "rate/range")
             .set_publisher(boost::bind(&rx_dsp_core_200::get_host_rates, _rx_dsps[dspno]));
         _tree->create<double>(rx_dsp_path / "rate/value")
             .set(1e6) //some default
-            .set_coercer(boost::bind(&rx_dsp_core_200::set_host_rate, _rx_dsps[dspno], _1))
-            .add_coerced_subscriber(boost::bind(&b100_impl::update_rx_samp_rate, this, dspno, _1));
+            .set_coercer(boost::bind(&rx_dsp_core_200::set_host_rate, _rx_dsps[dspno], boost::placeholders::_1))
+            .add_coerced_subscriber(boost::bind(&b100_impl::update_rx_samp_rate, this, dspno, boost::placeholders::_1));
         _tree->create<double>(rx_dsp_path / "freq/value")
-            .set_coercer(boost::bind(&rx_dsp_core_200::set_freq, _rx_dsps[dspno], _1));
+            .set_coercer(boost::bind(&rx_dsp_core_200::set_freq, _rx_dsps[dspno], boost::placeholders::_1));
         _tree->create<meta_range_t>(rx_dsp_path / "freq/range")
             .set_publisher(boost::bind(&rx_dsp_core_200::get_freq_range, _rx_dsps[dspno]));
         _tree->create<stream_cmd_t>(rx_dsp_path / "stream_cmd")
-            .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::issue_stream_command, _rx_dsps[dspno], _1));
+            .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::issue_stream_command, _rx_dsps[dspno], boost::placeholders::_1));
     }
 
     ////////////////////////////////////////////////////////////////////
@@ -391,15 +391,15 @@ b100_impl::b100_impl(const device_addr_t
     );
     _tx_dsp->set_link_rate(B100_LINK_RATE_BPS);
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&tx_dsp_core_200::set_tick_rate, _tx_dsp, _1));
+        .add_coerced_subscriber(boost::bind(&tx_dsp_core_200::set_tick_rate, _tx_dsp, boost::placeholders::_1));
     _tree->create<meta_range_t>(mb_path / "tx_dsps/0/rate/range")
         .set_publisher(boost::bind(&tx_dsp_core_200::get_host_rates, _tx_dsp));
     _tree->create<double>(mb_path / "tx_dsps/0/rate/value")
         .set(1e6) //some default
-        .set_coercer(boost::bind(&tx_dsp_core_200::set_host_rate, _tx_dsp, _1))
-        .add_coerced_subscriber(boost::bind(&b100_impl::update_tx_samp_rate, this, 0, _1));
+        .set_coercer(boost::bind(&tx_dsp_core_200::set_host_rate, _tx_dsp, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&b100_impl::update_tx_samp_rate, this, 0, boost::placeholders::_1));
     _tree->create<double>(mb_path / "tx_dsps/0/freq/value")
-        .set_coercer(boost::bind(&tx_dsp_core_200::set_freq, _tx_dsp, _1));
+        .set_coercer(boost::bind(&tx_dsp_core_200::set_freq, _tx_dsp, boost::placeholders::_1));
     _tree->create<meta_range_t>(mb_path / "tx_dsps/0/freq/range")
         .set_publisher(boost::bind(&tx_dsp_core_200::get_freq_range, _tx_dsp));
 
@@ -415,21 +415,21 @@ b100_impl::b100_impl(const device_addr_t
         _fifo_ctrl, TOREG(SR_TIME64), time64_rb_bases
     );
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&time64_core_200::set_tick_rate, _time64, _1));
+        .add_coerced_subscriber(boost::bind(&time64_core_200::set_tick_rate, _time64, boost::placeholders::_1));
     _tree->create<time_spec_t>(mb_path / "time/now")
         .set_publisher(boost::bind(&time64_core_200::get_time_now, _time64))
-        .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_now, _time64, _1));
+        .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_now, _time64, boost::placeholders::_1));
     _tree->create<time_spec_t>(mb_path / "time/pps")
         .set_publisher(boost::bind(&time64_core_200::get_time_last_pps, _time64))
-        .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_next_pps, _time64, _1));
+        .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_next_pps, _time64, boost::placeholders::_1));
     //setup time source props
     _tree->create<std::string>(mb_path / "time_source/value")
-        .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_source, _time64, _1));
+        .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_source, _time64, boost::placeholders::_1));
     _tree->create<std::vector<std::string> >(mb_path / "time_source/options")
         .set_publisher(boost::bind(&time64_core_200::get_time_sources, _time64));
     //setup reference source props
     _tree->create<std::string>(mb_path / "clock_source/value")
-        .add_coerced_subscriber(boost::bind(&b100_impl::update_clock_source, this, _1));
+        .add_coerced_subscriber(boost::bind(&b100_impl::update_clock_source, this, boost::placeholders::_1));
     static const std::vector<std::string> clock_sources = {
         "internal", "external", "auto"
     };
@@ -440,7 +440,7 @@ b100_impl::b100_impl(const device_addr_t
     ////////////////////////////////////////////////////////////////////
     _user = user_settings_core_200::make(_fifo_ctrl, TOREG(SR_USER_REGS));
     _tree->create<user_settings_core_200::user_reg_t>(mb_path / "user/regs")
-        .add_coerced_subscriber(boost::bind(&user_settings_core_200::set_reg, _user, _1));
+        .add_coerced_subscriber(boost::bind(&user_settings_core_200::set_reg, _user, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // create dboard control objects
@@ -458,13 +458,13 @@ b100_impl::b100_impl(const device_addr_t
     //create the properties and register subscribers
     _tree->create<dboard_eeprom_t>(mb_path / "dboards/A/rx_eeprom")
         .set(rx_db_eeprom)
-        .add_coerced_subscriber(boost::bind(&b100_impl::set_db_eeprom, this, "rx", _1));
+        .add_coerced_subscriber(boost::bind(&b100_impl::set_db_eeprom, this, "rx", boost::placeholders::_1));
     _tree->create<dboard_eeprom_t>(mb_path / "dboards/A/tx_eeprom")
         .set(tx_db_eeprom)
-        .add_coerced_subscriber(boost::bind(&b100_impl::set_db_eeprom, this, "tx", _1));
+        .add_coerced_subscriber(boost::bind(&b100_impl::set_db_eeprom, this, "tx", boost::placeholders::_1));
     _tree->create<dboard_eeprom_t>(mb_path / "dboards/A/gdb_eeprom")
         .set(gdb_eeprom)
-        .add_coerced_subscriber(boost::bind(&b100_impl::set_db_eeprom, this, "gdb", _1));
+        .add_coerced_subscriber(boost::bind(&b100_impl::set_db_eeprom, this, "gdb", boost::placeholders::_1));
 
     //create a new dboard interface and manager
     _dboard_manager = dboard_manager::make(
@@ -477,12 +477,12 @@ b100_impl::b100_impl(const device_addr_t
     const fs_path db_tx_fe_path = mb_path / "dboards" / "A" / "tx_frontends";
     for(const std::string &name:  _tree->list(db_tx_fe_path)){
         _tree->access<double>(db_tx_fe_path / name / "freq" / "value")
-            .add_coerced_subscriber(boost::bind(&b100_impl::set_tx_fe_corrections, this, _1));
+            .add_coerced_subscriber(boost::bind(&b100_impl::set_tx_fe_corrections, this, boost::placeholders::_1));
     }
     const fs_path db_rx_fe_path = mb_path / "dboards" / "A" / "rx_frontends";
     for(const std::string &name:  _tree->list(db_rx_fe_path)){
         _tree->access<double>(db_rx_fe_path / name / "freq" / "value")
-            .add_coerced_subscriber(boost::bind(&b100_impl::set_rx_fe_corrections, this, _1));
+            .add_coerced_subscriber(boost::bind(&b100_impl::set_rx_fe_corrections, this, boost::placeholders::_1));
     }
 
     //initialize io handling
@@ -498,7 +498,7 @@ b100_impl::b100_impl(const device_addr_t
     this->update_rates();
 
     _tree->access<double>(mb_path / "tick_rate") //now add_coerced_subscriber the clock rate setter
-        .add_coerced_subscriber(boost::bind(&b100_clock_ctrl::set_fpga_clock_rate, _clock_ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&b100_clock_ctrl::set_fpga_clock_rate, _clock_ctrl, boost::placeholders::_1));
 
     //reset cordic rates and their properties to zero
     for(const std::string &name:  _tree->list(mb_path / "rx_dsps")){
Index: uhd-3.15.0.0/host/lib/usrp/usrp2/usrp2_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/usrp2/usrp2_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/usrp2/usrp2_impl.cpp
@@ -462,7 +462,7 @@ usrp2_impl::usrp2_impl(const device_addr
         _tree->create<mboard_eeprom_t>(mb_path / "eeprom")
             .set(_mbc[mb].iface->mb_eeprom)
             .add_coerced_subscriber(
-                boost::bind(&usrp2_impl::set_mb_eeprom, this, mb, _1));
+                boost::bind(&usrp2_impl::set_mb_eeprom, this, mb, boost::placeholders::_1));
 
         ////////////////////////////////////////////////////////////////
         // create clock control objects
@@ -470,7 +470,7 @@ usrp2_impl::usrp2_impl(const device_addr
         _mbc[mb].clock = usrp2_clock_ctrl::make(_mbc[mb].iface, _mbc[mb].spiface);
         _tree->create<double>(mb_path / "tick_rate")
             .set_publisher(boost::bind(&usrp2_clock_ctrl::get_master_clock_rate, _mbc[mb].clock))
-            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_tick_rate, this, _1));
+            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_tick_rate, this, boost::placeholders::_1));
 
         ////////////////////////////////////////////////////////////////
         // create codec control objects
@@ -488,10 +488,10 @@ usrp2_impl::usrp2_impl(const device_addr
             _tree->create<std::string>(rx_codec_path / "name").set("ads62p44");
             _tree->create<meta_range_t>(rx_codec_path / "gains/digital/range").set(meta_range_t(0, 6.0, 0.5));
             _tree->create<double>(rx_codec_path / "gains/digital/value")
-                .add_coerced_subscriber(boost::bind(&usrp2_codec_ctrl::set_rx_digital_gain, _mbc[mb].codec, _1)).set(0);
+                .add_coerced_subscriber(boost::bind(&usrp2_codec_ctrl::set_rx_digital_gain, _mbc[mb].codec, boost::placeholders::_1)).set(0);
             _tree->create<meta_range_t>(rx_codec_path / "gains/fine/range").set(meta_range_t(0, 0.5, 0.05));
             _tree->create<double>(rx_codec_path / "gains/fine/value")
-                .add_coerced_subscriber(boost::bind(&usrp2_codec_ctrl::set_rx_digital_fine_gain, _mbc[mb].codec, _1)).set(0);
+                .add_coerced_subscriber(boost::bind(&usrp2_codec_ctrl::set_rx_digital_fine_gain, _mbc[mb].codec, boost::placeholders::_1)).set(0);
         }break;
 
         case usrp2_iface::USRP2_REV3:
@@ -566,27 +566,27 @@ usrp2_impl::usrp2_impl(const device_addr
         );
 
         _tree->create<subdev_spec_t>(mb_path / "rx_subdev_spec")
-            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_rx_subdev_spec, this, mb, _1));
+            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_rx_subdev_spec, this, mb, boost::placeholders::_1));
         _tree->create<subdev_spec_t>(mb_path / "tx_subdev_spec")
-            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_tx_subdev_spec, this, mb, _1));
+            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_tx_subdev_spec, this, mb, boost::placeholders::_1));
 
         const fs_path rx_fe_path = mb_path / "rx_frontends" / "A";
         const fs_path tx_fe_path = mb_path / "tx_frontends" / "A";
 
         _tree->create<std::complex<double> >(rx_fe_path / "dc_offset" / "value")
-            .set_coercer(boost::bind(&rx_frontend_core_200::set_dc_offset, _mbc[mb].rx_fe, _1))
+            .set_coercer(boost::bind(&rx_frontend_core_200::set_dc_offset, _mbc[mb].rx_fe, boost::placeholders::_1))
             .set(std::complex<double>(0.0, 0.0));
         _tree->create<bool>(rx_fe_path / "dc_offset" / "enable")
-            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_dc_offset_auto, _mbc[mb].rx_fe, _1))
+            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_dc_offset_auto, _mbc[mb].rx_fe, boost::placeholders::_1))
             .set(true);
         _tree->create<std::complex<double> >(rx_fe_path / "iq_balance" / "value")
-            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_iq_balance, _mbc[mb].rx_fe, _1))
+            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_iq_balance, _mbc[mb].rx_fe, boost::placeholders::_1))
             .set(std::complex<double>(0.0, 0.0));
         _tree->create<std::complex<double> >(tx_fe_path / "dc_offset" / "value")
-            .set_coercer(boost::bind(&tx_frontend_core_200::set_dc_offset, _mbc[mb].tx_fe, _1))
+            .set_coercer(boost::bind(&tx_frontend_core_200::set_dc_offset, _mbc[mb].tx_fe, boost::placeholders::_1))
             .set(std::complex<double>(0.0, 0.0));
         _tree->create<std::complex<double> >(tx_fe_path / "iq_balance" / "value")
-            .add_coerced_subscriber(boost::bind(&tx_frontend_core_200::set_iq_balance, _mbc[mb].tx_fe, _1))
+            .add_coerced_subscriber(boost::bind(&tx_frontend_core_200::set_iq_balance, _mbc[mb].tx_fe, boost::placeholders::_1))
             .set(std::complex<double>(0.0, 0.0));
 
         ////////////////////////////////////////////////////////////////
@@ -601,20 +601,20 @@ usrp2_impl::usrp2_impl(const device_addr
         for (size_t dspno = 0; dspno < _mbc[mb].rx_dsps.size(); dspno++){
             _mbc[mb].rx_dsps[dspno]->set_link_rate(USRP2_LINK_RATE_BPS);
             _tree->access<double>(mb_path / "tick_rate")
-                .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::set_tick_rate, _mbc[mb].rx_dsps[dspno], _1));
+                .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::set_tick_rate, _mbc[mb].rx_dsps[dspno], boost::placeholders::_1));
             fs_path rx_dsp_path = mb_path / str(boost::format("rx_dsps/%u") % dspno);
             _tree->create<meta_range_t>(rx_dsp_path / "rate/range")
                 .set_publisher(boost::bind(&rx_dsp_core_200::get_host_rates, _mbc[mb].rx_dsps[dspno]));
             _tree->create<double>(rx_dsp_path / "rate/value")
                 .set(1e6) //some default
-                .set_coercer(boost::bind(&rx_dsp_core_200::set_host_rate, _mbc[mb].rx_dsps[dspno], _1))
-                .add_coerced_subscriber(boost::bind(&usrp2_impl::update_rx_samp_rate, this, mb, dspno, _1));
+                .set_coercer(boost::bind(&rx_dsp_core_200::set_host_rate, _mbc[mb].rx_dsps[dspno], boost::placeholders::_1))
+                .add_coerced_subscriber(boost::bind(&usrp2_impl::update_rx_samp_rate, this, mb, dspno, boost::placeholders::_1));
             _tree->create<double>(rx_dsp_path / "freq/value")
-                .set_coercer(boost::bind(&rx_dsp_core_200::set_freq, _mbc[mb].rx_dsps[dspno], _1));
+                .set_coercer(boost::bind(&rx_dsp_core_200::set_freq, _mbc[mb].rx_dsps[dspno], boost::placeholders::_1));
             _tree->create<meta_range_t>(rx_dsp_path / "freq/range")
                 .set_publisher(boost::bind(&rx_dsp_core_200::get_freq_range, _mbc[mb].rx_dsps[dspno]));
             _tree->create<stream_cmd_t>(rx_dsp_path / "stream_cmd")
-                .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::issue_stream_command, _mbc[mb].rx_dsps[dspno], _1));
+                .add_coerced_subscriber(boost::bind(&rx_dsp_core_200::issue_stream_command, _mbc[mb].rx_dsps[dspno], boost::placeholders::_1));
         }
 
         ////////////////////////////////////////////////////////////////
@@ -681,22 +681,22 @@ usrp2_impl::usrp2_impl(const device_addr
             _mbc[mb].wbiface, U2_REG_SR_ADDR(SR_TIME64), time64_rb_bases, mimo_clock_sync_delay_cycles
         );
         _tree->access<double>(mb_path / "tick_rate")
-            .add_coerced_subscriber(boost::bind(&time64_core_200::set_tick_rate, _mbc[mb].time64, _1));
+            .add_coerced_subscriber(boost::bind(&time64_core_200::set_tick_rate, _mbc[mb].time64, boost::placeholders::_1));
         _tree->create<time_spec_t>(mb_path / "time/now")
             .set_publisher(boost::bind(&time64_core_200::get_time_now, _mbc[mb].time64))
-            .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_now, _mbc[mb].time64, _1));
+            .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_now, _mbc[mb].time64, boost::placeholders::_1));
         _tree->create<time_spec_t>(mb_path / "time/pps")
             .set_publisher(boost::bind(&time64_core_200::get_time_last_pps, _mbc[mb].time64))
-            .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_next_pps, _mbc[mb].time64, _1));
+            .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_next_pps, _mbc[mb].time64, boost::placeholders::_1));
         //setup time source props
         _tree->create<std::string>(mb_path / "time_source/value")
-            .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_source, _mbc[mb].time64, _1))
+            .add_coerced_subscriber(boost::bind(&time64_core_200::set_time_source, _mbc[mb].time64, boost::placeholders::_1))
             .set("none");
         _tree->create<std::vector<std::string> >(mb_path / "time_source/options")
             .set_publisher(boost::bind(&time64_core_200::get_time_sources, _mbc[mb].time64));
         //setup reference source props
         _tree->create<std::string>(mb_path / "clock_source/value")
-            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_clock_source, this, mb, _1))
+            .add_coerced_subscriber(boost::bind(&usrp2_impl::update_clock_source, this, mb, boost::placeholders::_1))
             .set("internal");
         std::vector<std::string> clock_sources{"internal", "external", "mimo"};
         if (_mbc[mb].gps and _mbc[mb].gps->gps_detected()) {
@@ -711,18 +711,18 @@ usrp2_impl::usrp2_impl(const device_addr
         case usrp2_iface::USRP_N200_R4:
         case usrp2_iface::USRP_N210_R4:
             _tree->create<time_spec_t>(mb_path / "time/cmd")
-                .add_coerced_subscriber(boost::bind(&usrp2_fifo_ctrl::set_time, _mbc[mb].fifo_ctrl, _1));
+                .add_coerced_subscriber(boost::bind(&usrp2_fifo_ctrl::set_time, _mbc[mb].fifo_ctrl, boost::placeholders::_1));
         default: break; //otherwise, do not register
         }
         _tree->access<double>(mb_path / "tick_rate")
-            .add_coerced_subscriber(boost::bind(&usrp2_fifo_ctrl::set_tick_rate, _mbc[mb].fifo_ctrl, _1));
+            .add_coerced_subscriber(boost::bind(&usrp2_fifo_ctrl::set_tick_rate, _mbc[mb].fifo_ctrl, boost::placeholders::_1));
 
         ////////////////////////////////////////////////////////////////////
         // create user-defined control objects
         ////////////////////////////////////////////////////////////////////
         _mbc[mb].user = user_settings_core_200::make(_mbc[mb].wbiface, U2_REG_SR_ADDR(SR_USER_REGS));
         _tree->create<user_settings_core_200::user_reg_t>(mb_path / "user/regs")
-            .add_coerced_subscriber(boost::bind(&user_settings_core_200::set_reg, _mbc[mb].user, _1));
+            .add_coerced_subscriber(boost::bind(&user_settings_core_200::set_reg, _mbc[mb].user, boost::placeholders::_1));
 
         ////////////////////////////////////////////////////////////////
         // create dboard control objects
@@ -740,13 +740,13 @@ usrp2_impl::usrp2_impl(const device_addr
         //create the properties and register subscribers
         _tree->create<dboard_eeprom_t>(mb_path / "dboards/A/rx_eeprom")
             .set(rx_db_eeprom)
-            .add_coerced_subscriber(boost::bind(&usrp2_impl::set_db_eeprom, this, mb, "rx", _1));
+            .add_coerced_subscriber(boost::bind(&usrp2_impl::set_db_eeprom, this, mb, "rx", boost::placeholders::_1));
         _tree->create<dboard_eeprom_t>(mb_path / "dboards/A/tx_eeprom")
             .set(tx_db_eeprom)
-            .add_coerced_subscriber(boost::bind(&usrp2_impl::set_db_eeprom, this, mb, "tx", _1));
+            .add_coerced_subscriber(boost::bind(&usrp2_impl::set_db_eeprom, this, mb, "tx", boost::placeholders::_1));
         _tree->create<dboard_eeprom_t>(mb_path / "dboards/A/gdb_eeprom")
             .set(gdb_eeprom)
-            .add_coerced_subscriber(boost::bind(&usrp2_impl::set_db_eeprom, this, mb, "gdb", _1));
+            .add_coerced_subscriber(boost::bind(&usrp2_impl::set_db_eeprom, this, mb, "gdb", boost::placeholders::_1));
 
         //create a new dboard interface and manager
         _mbc[mb].dboard_manager = dboard_manager::make(
@@ -759,12 +759,12 @@ usrp2_impl::usrp2_impl(const device_addr
         const fs_path db_tx_fe_path = mb_path / "dboards" / "A" / "tx_frontends";
         for(const std::string &name:  _tree->list(db_tx_fe_path)){
             _tree->access<double>(db_tx_fe_path / name / "freq" / "value")
-                .add_coerced_subscriber(boost::bind(&usrp2_impl::set_tx_fe_corrections, this, mb, _1));
+                .add_coerced_subscriber(boost::bind(&usrp2_impl::set_tx_fe_corrections, this, mb, boost::placeholders::_1));
         }
         const fs_path db_rx_fe_path = mb_path / "dboards" / "A" / "rx_frontends";
         for(const std::string &name:  _tree->list(db_rx_fe_path)){
             _tree->access<double>(db_rx_fe_path / name / "freq" / "value")
-                .add_coerced_subscriber(boost::bind(&usrp2_impl::set_rx_fe_corrections, this, mb, _1));
+                .add_coerced_subscriber(boost::bind(&usrp2_impl::set_rx_fe_corrections, this, mb, boost::placeholders::_1));
         }
     }
 
Index: uhd-3.15.0.0/host/lib/experts/expert_container.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/experts/expert_container.cpp
+++ uhd-3.15.0.0/host/lib/experts/expert_container.cpp
@@ -299,11 +299,11 @@ protected:
             //Add resolve callbacks
             if (resolve_mode == AUTO_RESOLVE_ON_WRITE or resolve_mode == AUTO_RESOLVE_ON_READ_WRITE) {
                 EX_LOG(2, str(boost::format("added write callback")));
-                data_node->set_write_callback(boost::bind(&expert_container_impl::resolve_from, this, _1));
+                data_node->set_write_callback(boost::bind(&expert_container_impl::resolve_from, this, boost::placeholders::_1));
             }
             if (resolve_mode == AUTO_RESOLVE_ON_READ or resolve_mode == AUTO_RESOLVE_ON_READ_WRITE) {
                 EX_LOG(2, str(boost::format("added read callback")));
-                data_node->set_read_callback(boost::bind(&expert_container_impl::resolve_to, this, _1));
+                data_node->set_read_callback(boost::bind(&expert_container_impl::resolve_to, this, boost::placeholders::_1));
             }
         } catch (...) {
             clear();
Index: uhd-3.15.0.0/host/lib/include/uhdlib/experts/expert_factory.hpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/include/uhdlib/experts/expert_factory.hpp
+++ uhd-3.15.0.0/host/lib/include/uhdlib/experts/expert_factory.hpp
@@ -94,7 +94,7 @@ namespace uhd { namespace experts {
             data_node_t<data_t>* node_ptr =
                 new data_node_t<data_t>(name, init_val, &container->resolve_mutex());
             prop.set(init_val);
-            prop.add_desired_subscriber(boost::bind(&data_node_t<data_t>::commit, node_ptr, _1));
+            prop.add_desired_subscriber(boost::bind(&data_node_t<data_t>::commit, node_ptr, boost::placeholders::_1));
             prop.set_publisher(boost::bind(&data_node_t<data_t>::retrieve, node_ptr));
             container->add_data_node(node_ptr, mode);
             return prop;
@@ -161,7 +161,7 @@ namespace uhd { namespace experts {
                 new data_node_t<data_t>(coerced_name, init_val, &container->resolve_mutex());
             prop.set(init_val);
             prop.set_coerced(init_val);
-            prop.add_desired_subscriber(boost::bind(&data_node_t<data_t>::commit, desired_node_ptr, _1));
+            prop.add_desired_subscriber(boost::bind(&data_node_t<data_t>::commit, desired_node_ptr, boost::placeholders::_1));
             prop.set_publisher(boost::bind(&data_node_t<data_t>::retrieve, coerced_node_ptr));
 
             container->add_data_node(desired_node_ptr,
Index: uhd-3.15.0.0/host/lib/rfnoc/nocscript/block_iface.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/rfnoc/nocscript/block_iface.cpp
+++ uhd-3.15.0.0/host/lib/rfnoc/nocscript/block_iface.cpp
@@ -28,11 +28,11 @@ block_iface::block_iface(block_ctrl_base
     expression_function::argtype_list_type sr_write_args_w_port = boost::assign::list_of(
         expression::TYPE_STRING)(expression::TYPE_INT)(expression::TYPE_INT);
     ft->register_function("SR_WRITE",
-        boost::bind(&block_iface::_nocscript__sr_write, this, _1),
+        boost::bind(&block_iface::_nocscript__sr_write, this, boost::placeholders::_1),
         expression::TYPE_BOOL,
         sr_write_args_wo_port);
     ft->register_function("SR_WRITE",
-        boost::bind(&block_iface::_nocscript__sr_write, this, _1),
+        boost::bind(&block_iface::_nocscript__sr_write, this, boost::placeholders::_1),
         expression::TYPE_BOOL,
         sr_write_args_w_port);
 
@@ -45,11 +45,11 @@ block_iface::block_iface(block_ctrl_base
     arg_set_args_wo_port[1] = expression::noctype;        \
     arg_set_args_w_port[1]  = expression::noctype;        \
     ft->register_function("SET_ARG",                      \
-        boost::bind(&block_iface::setter_func, this, _1), \
+        boost::bind(&block_iface::setter_func, this, boost::placeholders::_1), \
         expression::TYPE_BOOL,                            \
         arg_set_args_wo_port);                            \
     ft->register_function("SET_ARG",                      \
-        boost::bind(&block_iface::setter_func, this, _1), \
+        boost::bind(&block_iface::setter_func, this, boost::placeholders::_1), \
         expression::TYPE_BOOL,                            \
         arg_set_args_w_port);
     REGISTER_ARG_SETTER(TYPE_INT, _nocscript__arg_set_int);
@@ -66,11 +66,11 @@ block_iface::block_iface(block_ctrl_base
 #define REGISTER_VAR_ACCESS(noctype, typestr)                     \
     set_var_args[1] = expression::noctype;                        \
     ft->register_function("SET_VAR",                              \
-        boost::bind(&block_iface::_nocscript__var_set, this, _1), \
+        boost::bind(&block_iface::_nocscript__var_set, this, boost::placeholders::_1), \
         expression::TYPE_BOOL,                                    \
         set_var_args);                                            \
     ft->register_function("GET_" #typestr,                        \
-        boost::bind(&block_iface::_nocscript__var_get, this, _1), \
+        boost::bind(&block_iface::_nocscript__var_get, this, boost::placeholders::_1), \
         expression::noctype,                                      \
         get_var_args);
     REGISTER_VAR_ACCESS(TYPE_INT, INT);
@@ -80,8 +80,8 @@ block_iface::block_iface(block_ctrl_base
 
     // Create the parser
     _parser = parser::make(ft,
-        boost::bind(&block_iface::_nocscript__arg_get_type, this, _1),
-        boost::bind(&block_iface::_nocscript__arg_get_val, this, _1));
+        boost::bind(&block_iface::_nocscript__arg_get_type, this, boost::placeholders::_1),
+        boost::bind(&block_iface::_nocscript__arg_get_val, this, boost::placeholders::_1));
 }
 
 
Index: uhd-3.15.0.0/host/lib/rfnoc/nocscript/gen_basic_funcs.py
===================================================================
--- uhd-3.15.0.0.orig/host/lib/rfnoc/nocscript/gen_basic_funcs.py
+++ uhd-3.15.0.0/host/lib/rfnoc/nocscript/gen_basic_funcs.py
@@ -316,7 +316,7 @@ REGISTER_COMMANDS_TEMPLATE = """
     % endif
     register_function(
             "${name}",
-            boost::bind(&${func_name}, _1),
+            boost::bind(&${func_name}, boost::placeholders::_1),
             expression::TYPE_${retval},
             ${func_name}_args
     );"""
Index: uhd-3.15.0.0/host/lib/usrp/b100/io_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/b100/io_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/b100/io_impl.cpp
@@ -156,7 +156,7 @@ rx_streamer::sptr b100_impl::get_rx_stre
             &rx_dsp_core_200::handle_overflow, _rx_dsps[dsp]
         ));
         my_streamer->set_issue_stream_cmd(chan_i, boost::bind(
-            &rx_dsp_core_200::issue_stream_command, _rx_dsps[dsp], _1));
+            &rx_dsp_core_200::issue_stream_command, _rx_dsps[dsp], boost::placeholders::_1));
         _rx_streamers[dsp] = my_streamer; //store weak pointer
     }
 
@@ -210,7 +210,7 @@ tx_streamer::sptr b100_impl::get_tx_stre
         my_streamer->set_xport_chan_get_buff(chan_i, boost::bind(
             &zero_copy_if::get_send_buff, _data_transport, _1
         ));
-        my_streamer->set_async_receiver(boost::bind(&fifo_ctrl_excelsior::pop_async_msg, _fifo_ctrl, _1, _2));
+        my_streamer->set_async_receiver(boost::bind(&fifo_ctrl_excelsior::pop_async_msg, _fifo_ctrl, boost::placeholders::_1, _2));
         _tx_streamers[dsp] = my_streamer; //store weak pointer
     }
 
Index: uhd-3.15.0.0/host/lib/usrp/b200/b200_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/b200/b200_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/b200/b200_impl.cpp
@@ -358,7 +358,7 @@ b200_impl::b200_impl(const uhd::device_a
     const mboard_eeprom_t mb_eeprom = get_mb_eeprom(_iface);
     _tree->create<mboard_eeprom_t>(mb_path / "eeprom")
         .set(mb_eeprom)
-        .add_coerced_subscriber(boost::bind(&b200_impl::set_mb_eeprom, this, _1));
+        .add_coerced_subscriber(boost::bind(&b200_impl::set_mb_eeprom, this, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // Identify the device type
@@ -612,9 +612,9 @@ b200_impl::b200_impl(const uhd::device_a
     // create clock control objects
     ////////////////////////////////////////////////////////////////////
     _tree->create<double>(mb_path / "tick_rate")
-        .set_coercer(boost::bind(&b200_impl::set_tick_rate, this, _1))
+        .set_coercer(boost::bind(&b200_impl::set_tick_rate, this, boost::placeholders::_1))
         .set_publisher(boost::bind(&b200_impl::get_tick_rate, this))
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_tick_rate, this, _1));
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_tick_rate, this, boost::placeholders::_1));
     _tree->create<meta_range_t>(mb_path / "tick_rate/range")
         .set_publisher([this](){
             return this->_codec_ctrl->get_clock_rate_range();
@@ -636,13 +636,13 @@ b200_impl::b200_impl(const uhd::device_a
     _tree->create<std::vector<size_t> >(mb_path / "rx_chan_dsp_mapping").set(default_map);
     _tree->create<std::vector<size_t> >(mb_path / "tx_chan_dsp_mapping").set(default_map);
     _tree->create<subdev_spec_t>(mb_path / "rx_subdev_spec")
-        .set_coercer(boost::bind(&b200_impl::coerce_subdev_spec, this, _1))
+        .set_coercer(boost::bind(&b200_impl::coerce_subdev_spec, this, boost::placeholders::_1))
         .set(subdev_spec_t())
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_subdev_spec, this, "rx", _1));
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_subdev_spec, this, "rx", boost::placeholders::_1));
     _tree->create<subdev_spec_t>(mb_path / "tx_subdev_spec")
-        .set_coercer(boost::bind(&b200_impl::coerce_subdev_spec, this, _1))
+        .set_coercer(boost::bind(&b200_impl::coerce_subdev_spec, this, boost::placeholders::_1))
         .set(subdev_spec_t())
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_subdev_spec, this, "tx", _1));
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_subdev_spec, this, "tx", boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // setup radio control
@@ -672,7 +672,7 @@ b200_impl::b200_impl(const uhd::device_a
     //register time now and pps onto available radio cores
     _tree->create<time_spec_t>(mb_path / "time" / "now")
         .set_publisher(boost::bind(&time_core_3000::get_time_now, _radio_perifs[0].time64))
-        .add_coerced_subscriber(boost::bind(&b200_impl::set_time, this, _1))
+        .add_coerced_subscriber(boost::bind(&b200_impl::set_time, this, boost::placeholders::_1))
         .set(0.0);
     //re-sync the times when the tick rate changes
     _tree->access<double>(mb_path / "tick_rate")
@@ -682,7 +682,7 @@ b200_impl::b200_impl(const uhd::device_a
     for(radio_perifs_t &perif:  _radio_perifs)
     {
         _tree->access<time_spec_t>(mb_path / "time" / "pps")
-            .add_coerced_subscriber(boost::bind(&time_core_3000::set_time_next_pps, perif.time64, _1));
+            .add_coerced_subscriber(boost::bind(&time_core_3000::set_time_next_pps, perif.time64, boost::placeholders::_1));
     }
 
     //setup time source props
@@ -693,8 +693,8 @@ b200_impl::b200_impl(const uhd::device_a
     _tree->create<std::vector<std::string> >(mb_path / "time_source" / "options")
         .set(time_sources);
     _tree->create<std::string>(mb_path / "time_source" / "value")
-        .set_coercer(boost::bind(&check_option_valid, "time source", time_sources, _1))
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_time_source, this, _1));
+        .set_coercer(boost::bind(&check_option_valid, "time source", time_sources, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_time_source, this, boost::placeholders::_1));
     //setup reference source props
     const std::vector<std::string> clock_sources =
         (_gpsdo_capable) ?
@@ -703,8 +703,8 @@ b200_impl::b200_impl(const uhd::device_a
     _tree->create<std::vector<std::string> >(mb_path / "clock_source" / "options")
         .set(clock_sources);
     _tree->create<std::string>(mb_path / "clock_source" / "value")
-        .set_coercer(boost::bind(&check_option_valid, "clock source", clock_sources, _1))
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_clock_source, this, _1));
+        .set_coercer(boost::bind(&check_option_valid, "clock source", clock_sources, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_clock_source, this, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // front panel gpio
@@ -738,7 +738,7 @@ b200_impl::b200_impl(const uhd::device_a
                 default:
                     _tree->create<uint32_t>(mb_path / "gpio" / "FP0" / attr.second)
                     .set(0)
-                    .add_coerced_subscriber(boost::bind(&gpio_atr_3000::set_gpio_attr, _radio_perifs[0].fp_gpio, attr.first, _1));
+                    .add_coerced_subscriber(boost::bind(&gpio_atr_3000::set_gpio_attr, _radio_perifs[0].fp_gpio, attr.first, boost::placeholders::_1));
             }
     }
 
@@ -818,9 +818,9 @@ void b200_impl::setup_radio(const size_t
     perif.ctrl->hold_task(_async_task);
     _async_task_data->radio_ctrl[dspno] = perif.ctrl; //weak
     _tree->access<time_spec_t>(mb_path / "time" / "cmd")
-        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_time, perif.ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_time, perif.ctrl, boost::placeholders::_1));
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_tick_rate, perif.ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&radio_ctrl_core_3000::set_tick_rate, perif.ctrl, boost::placeholders::_1));
     this->register_loopback_self_test(perif.ctrl);
 
     ////////////////////////////////////////////////////////////////////
@@ -866,20 +866,20 @@ void b200_impl::setup_radio(const size_t
     perif.ddc->populate_subtree(_tree->subtree(rx_dsp_path));
     _tree->create<bool>(rx_dsp_path / "rate" / "set").set(false);
     _tree->access<double>(rx_dsp_path / "rate" / "value")
-        .set_coercer(boost::bind(&b200_impl::coerce_rx_samp_rate, this, perif.ddc, dspno, _1))
+        .set_coercer(boost::bind(&b200_impl::coerce_rx_samp_rate, this, perif.ddc, dspno, boost::placeholders::_1))
         .add_coerced_subscriber([this, rx_dsp_path](const double){
             if (this->_tree) {
                 this->_tree->access<bool>(rx_dsp_path / "rate" / "set")
                     .set(true);
             }
         })
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_rx_samp_rate, this, dspno, _1))
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_rx_samp_rate, this, dspno, boost::placeholders::_1))
     ;
     _tree->create<stream_cmd_t>(rx_dsp_path / "stream_cmd")
-        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::issue_stream_command, perif.framer, _1));
+        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::issue_stream_command, perif.framer, boost::placeholders::_1));
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::set_tick_rate, perif.framer, _1))
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_rx_dsp_tick_rate, this, _1, perif.ddc, rx_dsp_path))
+        .add_coerced_subscriber(boost::bind(&rx_vita_core_3000::set_tick_rate, perif.framer, boost::placeholders::_1))
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_rx_dsp_tick_rate, this, boost::placeholders::_1, perif.ddc, rx_dsp_path))
     ;
 
     ////////////////////////////////////////////////////////////////////
@@ -889,17 +889,17 @@ void b200_impl::setup_radio(const size_t
     perif.duc->populate_subtree(_tree->subtree(tx_dsp_path));
     _tree->create<bool>(tx_dsp_path / "rate" / "set").set(false);
     _tree->access<double>(tx_dsp_path / "rate" / "value")
-        .set_coercer(boost::bind(&b200_impl::coerce_tx_samp_rate, this, perif.duc, dspno, _1))
+        .set_coercer(boost::bind(&b200_impl::coerce_tx_samp_rate, this, perif.duc, dspno, boost::placeholders::_1))
         .add_coerced_subscriber([this, tx_dsp_path](const double){
             if (this->_tree) {
                 this->_tree->access<bool>(tx_dsp_path / "rate" / "set")
                     .set(true);
             }
         })
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_tx_samp_rate, this, dspno, _1))
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_tx_samp_rate, this, dspno, boost::placeholders::_1))
     ;
     _tree->access<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&b200_impl::update_tx_dsp_tick_rate, this, _1, perif.duc, tx_dsp_path))
+        .add_coerced_subscriber(boost::bind(&b200_impl::update_tx_dsp_tick_rate, this, boost::placeholders::_1, perif.duc, tx_dsp_path))
     ;
 
     ////////////////////////////////////////////////////////////////////
@@ -921,14 +921,14 @@ void b200_impl::setup_radio(const size_t
             .set_publisher(boost::bind(&b200_impl::get_fe_pll_locked, this, dir == TX_DIRECTION))
         ;
         _tree->access<double>(rf_fe_path / "freq" / "value")
-            .add_coerced_subscriber(boost::bind(&b200_impl::update_bandsel, this, key, _1))
+            .add_coerced_subscriber(boost::bind(&b200_impl::update_bandsel, this, key, boost::placeholders::_1))
         ;
         if (dir == RX_DIRECTION)
         {
             static const std::vector<std::string> ants{"TX/RX", "RX2"};
             _tree->create<std::vector<std::string> >(rf_fe_path / "antenna" / "options").set(ants);
             _tree->create<std::string>(rf_fe_path / "antenna" / "value")
-                .add_coerced_subscriber(boost::bind(&b200_impl::update_antenna_sel, this, dspno, _1))
+                .add_coerced_subscriber(boost::bind(&b200_impl::update_antenna_sel, this, dspno, boost::placeholders::_1))
                 .set("RX2")
             ;
 
Index: uhd-3.15.0.0/host/lib/usrp/b200/b200_io_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/b200/b200_io_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/b200/b200_io_impl.cpp
@@ -458,12 +458,12 @@ rx_streamer::sptr b200_impl::get_rx_stre
         perif.ddc->setup(args);
         _demux->realloc_sid(sid);
         my_streamer->set_xport_chan_get_buff(stream_i,
-            boost::bind(&recv_packet_demuxer_3000::get_recv_buff, _demux, sid, _1),
+            boost::bind(&recv_packet_demuxer_3000::get_recv_buff, _demux, sid, boost::placeholders::_1),
             true /*flush*/);
         my_streamer->set_overflow_handler(
             stream_i, boost::bind(&b200_impl::handle_overflow, this, radio_index));
         my_streamer->set_issue_stream_cmd(stream_i,
-            boost::bind(&rx_vita_core_3000::issue_stream_command, perif.framer, _1));
+            boost::bind(&rx_vita_core_3000::issue_stream_command, perif.framer, boost::placeholders::_1));
         perif.rx_streamer = my_streamer; // store weak pointer
 
         // sets all tick and samp rates on this streamer
@@ -575,9 +575,9 @@ tx_streamer::sptr b200_impl::get_tx_stre
         perif.duc->setup(args);
 
         my_streamer->set_xport_chan_get_buff(
-            stream_i, boost::bind(&zero_copy_if::get_send_buff, _data_transport, _1));
+            stream_i, boost::bind(&zero_copy_if::get_send_buff, _data_transport, boost::placeholders::_1));
         my_streamer->set_async_receiver(boost::bind(
-            &async_md_type::pop_with_timed_wait, _async_task_data->async_md, _1, _2));
+            &async_md_type::pop_with_timed_wait, _async_task_data->async_md, boost::placeholders::_1, boost::placeholders::_2));
         my_streamer->set_xport_chan_sid(
             stream_i, true, radio_index ? B200_TX_DATA1_SID : B200_TX_DATA0_SID);
         my_streamer->set_enable_trailer(false); // TODO not implemented trailer support
Index: uhd-3.15.0.0/host/lib/usrp/cores/rx_dsp_core_3000.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/cores/rx_dsp_core_3000.cpp
+++ uhd-3.15.0.0/host/lib/usrp/cores/rx_dsp_core_3000.cpp
@@ -300,10 +300,10 @@ public:
             .set_publisher(boost::bind(&rx_dsp_core_3000::get_host_rates, this));
         subtree->create<double>("rate/value")
             .set(DEFAULT_RATE)
-            .set_coercer(boost::bind(&rx_dsp_core_3000::set_host_rate, this, _1));
+            .set_coercer(boost::bind(&rx_dsp_core_3000::set_host_rate, this, boost::placeholders::_1));
         subtree->create<double>("freq/value")
             .set(DEFAULT_CORDIC_FREQ)
-            .set_coercer(boost::bind(&rx_dsp_core_3000::set_freq, this, _1))
+            .set_coercer(boost::bind(&rx_dsp_core_3000::set_freq, this, boost::placeholders::_1))
             .set_publisher([this]() { return this->get_freq(); });
         subtree->create<meta_range_t>("freq/range")
             .set_publisher(boost::bind(&rx_dsp_core_3000::get_freq_range, this));
Index: uhd-3.15.0.0/host/lib/usrp/cores/rx_frontend_core_200.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/cores/rx_frontend_core_200.cpp
+++ uhd-3.15.0.0/host/lib/usrp/cores/rx_frontend_core_200.cpp
@@ -82,15 +82,15 @@ public:
         ;
         subtree->create<std::complex<double> >("dc_offset/value")
             .set(DEFAULT_DC_OFFSET_VALUE)
-            .set_coercer(boost::bind(&rx_frontend_core_200::set_dc_offset, this, _1))
+            .set_coercer(boost::bind(&rx_frontend_core_200::set_dc_offset, this, boost::placeholders::_1))
         ;
         subtree->create<bool>("dc_offset/enable")
             .set(DEFAULT_DC_OFFSET_ENABLE)
-            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_dc_offset_auto, this, _1))
+            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_dc_offset_auto, this, boost::placeholders::_1))
         ;
         subtree->create<std::complex<double> >("iq_balance/value")
             .set(DEFAULT_IQ_BALANCE_VALUE)
-            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_iq_balance, this, _1))
+            .add_coerced_subscriber(boost::bind(&rx_frontend_core_200::set_iq_balance, this, boost::placeholders::_1))
         ;
     }
 
Index: uhd-3.15.0.0/host/lib/usrp/cores/rx_frontend_core_3000.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/cores/rx_frontend_core_3000.cpp
+++ uhd-3.15.0.0/host/lib/usrp/cores/rx_frontend_core_3000.cpp
@@ -171,15 +171,15 @@ public:
             .set(meta_range_t(DC_OFFSET_MIN, DC_OFFSET_MAX));
         subtree->create<std::complex<double>>("dc_offset/value")
             .set(DEFAULT_DC_OFFSET_VALUE)
-            .set_coercer(boost::bind(&rx_frontend_core_3000::set_dc_offset, this, _1));
+            .set_coercer(boost::bind(&rx_frontend_core_3000::set_dc_offset, this, boost::placeholders::_1));
         subtree->create<bool>("dc_offset/enable")
             .set(DEFAULT_DC_OFFSET_ENABLE)
             .add_coerced_subscriber(
-                boost::bind(&rx_frontend_core_3000::set_dc_offset_auto, this, _1));
+                boost::bind(&rx_frontend_core_3000::set_dc_offset_auto, this, boost::placeholders::_1));
         subtree->create<std::complex<double>>("iq_balance/value")
             .set(DEFAULT_IQ_BALANCE_VALUE)
             .add_coerced_subscriber(
-                boost::bind(&rx_frontend_core_3000::set_iq_balance, this, _1));
+                boost::bind(&rx_frontend_core_3000::set_iq_balance, this, boost::placeholders::_1));
     }
 
     double get_output_rate()
Index: uhd-3.15.0.0/host/lib/usrp/cores/tx_dsp_core_3000.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/cores/tx_dsp_core_3000.cpp
+++ uhd-3.15.0.0/host/lib/usrp/cores/tx_dsp_core_3000.cpp
@@ -187,10 +187,10 @@ public:
             .set_publisher(boost::bind(&tx_dsp_core_3000::get_host_rates, this));
         subtree->create<double>("rate/value")
             .set(DEFAULT_RATE)
-            .set_coercer(boost::bind(&tx_dsp_core_3000::set_host_rate, this, _1));
+            .set_coercer(boost::bind(&tx_dsp_core_3000::set_host_rate, this, boost::placeholders::_1));
         subtree->create<double>("freq/value")
             .set(DEFAULT_CORDIC_FREQ)
-            .set_coercer(boost::bind(&tx_dsp_core_3000::set_freq, this, _1))
+            .set_coercer(boost::bind(&tx_dsp_core_3000::set_freq, this, boost::placeholders::_1))
             .set_publisher([this]() { return this->get_freq(); });
         subtree->create<meta_range_t>("freq/range")
             .set_publisher(boost::bind(&tx_dsp_core_3000::get_freq_range, this));
Index: uhd-3.15.0.0/host/lib/usrp/cores/tx_frontend_core_200.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/cores/tx_frontend_core_200.cpp
+++ uhd-3.15.0.0/host/lib/usrp/cores/tx_frontend_core_200.cpp
@@ -78,11 +78,11 @@ public:
         ;
         subtree->create< std::complex<double> >("dc_offset/value")
             .set(DEFAULT_DC_OFFSET_VALUE)
-            .set_coercer(boost::bind(&tx_frontend_core_200::set_dc_offset, this, _1))
+            .set_coercer(boost::bind(&tx_frontend_core_200::set_dc_offset, this, boost::placeholders::_1))
         ;
         subtree->create< std::complex<double> >("iq_balance/value")
             .set(DEFAULT_IQ_BALANCE_VALUE)
-            .add_coerced_subscriber(boost::bind(&tx_frontend_core_200::set_iq_balance, this, _1))
+            .add_coerced_subscriber(boost::bind(&tx_frontend_core_200::set_iq_balance, this, boost::placeholders::_1))
         ;
     }
 
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_cbx.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_cbx.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_cbx.cpp
@@ -19,8 +19,8 @@ using namespace boost::assign;
 sbx_xcvr::cbx::cbx(sbx_xcvr *_self_sbx_xcvr) {
     //register the handle to our base CBX class
     self_base = _self_sbx_xcvr;
-    _txlo = max287x_iface::make<max2870>(boost::bind(&sbx_xcvr::cbx::write_lo_regs, this, dboard_iface::UNIT_TX, _1));
-    _rxlo = max287x_iface::make<max2870>(boost::bind(&sbx_xcvr::cbx::write_lo_regs, this, dboard_iface::UNIT_RX, _1));
+    _txlo = max287x_iface::make<max2870>(boost::bind(&sbx_xcvr::cbx::write_lo_regs, this, dboard_iface::UNIT_TX, boost::placeholders::_1));
+    _rxlo = max287x_iface::make<max2870>(boost::bind(&sbx_xcvr::cbx::write_lo_regs, this, dboard_iface::UNIT_RX, boost::placeholders::_1));
 }
 
 
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_dbsrx.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_dbsrx.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_dbsrx.cpp
@@ -198,13 +198,13 @@ dbsrx::dbsrx(ctor_args_t args) : rx_dboa
         .set_publisher(boost::bind(&dbsrx::get_locked, this));
     for(const std::string &name:  dbsrx_gain_ranges.keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&dbsrx::set_gain, this, _1, name))
+            .set_coercer(boost::bind(&dbsrx::set_gain, this, boost::placeholders::_1, name))
             .set(dbsrx_gain_ranges[name].start());
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(dbsrx_gain_ranges[name]);
     }
     this->get_rx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&dbsrx::set_lo_freq, this, _1));
+        .set_coercer(boost::bind(&dbsrx::set_lo_freq, this, boost::placeholders::_1));
     this->get_rx_subtree()->create<meta_range_t>("freq/range")
         .set(dbsrx_freq_range);
     this->get_rx_subtree()->create<std::string>("antenna/value")
@@ -218,7 +218,7 @@ dbsrx::dbsrx(ctor_args_t args) : rx_dboa
     this->get_rx_subtree()->create<bool>("use_lo_offset")
         .set(false);
     this->get_rx_subtree()->create<double>("bandwidth/value")
-        .set_coercer(boost::bind(&dbsrx::set_bandwidth, this, _1));
+        .set_coercer(boost::bind(&dbsrx::set_bandwidth, this, boost::placeholders::_1));
     this->get_rx_subtree()->create<meta_range_t>("bandwidth/range")
         .set(dbsrx_bandwidth_range);
 
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_dbsrx2.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_dbsrx2.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_dbsrx2.cpp
@@ -179,13 +179,13 @@ dbsrx2::dbsrx2(ctor_args_t args) : rx_db
         .set_publisher(boost::bind(&dbsrx2::get_locked, this));
     for(const std::string &name:  dbsrx2_gain_ranges.keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&dbsrx2::set_gain, this, _1, name))
+            .set_coercer(boost::bind(&dbsrx2::set_gain, this, boost::placeholders::_1, name))
             .set(dbsrx2_gain_ranges[name].start());
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(dbsrx2_gain_ranges[name]);
     }
     this->get_rx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&dbsrx2::set_lo_freq, this, _1))
+        .set_coercer(boost::bind(&dbsrx2::set_lo_freq, this, boost::placeholders::_1))
         .set(dbsrx2_freq_range.start());
     this->get_rx_subtree()->create<meta_range_t>("freq/range")
         .set(dbsrx2_freq_range);
@@ -203,7 +203,7 @@ dbsrx2::dbsrx2(ctor_args_t args) : rx_db
     double codec_rate = this->get_iface()->get_codec_rate(dboard_iface::UNIT_RX);
 
     this->get_rx_subtree()->create<double>("bandwidth/value")
-        .set_coercer(boost::bind(&dbsrx2::set_bandwidth, this, _1))
+        .set_coercer(boost::bind(&dbsrx2::set_bandwidth, this, boost::placeholders::_1))
         .set(2.0*(0.8*codec_rate/2.0)); //bandwidth in lowpass, convert to complex bandpass
                                         //default to anti-alias at different codec_rate
     this->get_rx_subtree()->create<meta_range_t>("bandwidth/range")
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_rfx.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_rfx.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_rfx.cpp
@@ -176,17 +176,17 @@ rfx_xcvr::rfx_xcvr(
         .set_publisher(boost::bind(&rfx_xcvr::get_locked, this, dboard_iface::UNIT_RX));
     for(const std::string &name:  _rx_gain_ranges.keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&rfx_xcvr::set_rx_gain, this, _1, name))
+            .set_coercer(boost::bind(&rfx_xcvr::set_rx_gain, this, boost::placeholders::_1, name))
             .set(_rx_gain_ranges[name].start());
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(_rx_gain_ranges[name]);
     }
     this->get_rx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&rfx_xcvr::set_lo_freq, this, dboard_iface::UNIT_RX, _1))
+        .set_coercer(boost::bind(&rfx_xcvr::set_lo_freq, this, dboard_iface::UNIT_RX, boost::placeholders::_1))
         .set((_freq_range.start() + _freq_range.stop())/2.0);
     this->get_rx_subtree()->create<meta_range_t>("freq/range").set(_freq_range);
     this->get_rx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&rfx_xcvr::set_rx_ant, this, _1))
+        .add_coerced_subscriber(boost::bind(&rfx_xcvr::set_rx_ant, this, boost::placeholders::_1))
         .set("RX2");
     this->get_rx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(rfx_rx_antennas);
@@ -212,11 +212,11 @@ rfx_xcvr::rfx_xcvr(
         .set_publisher(boost::bind(&rfx_xcvr::get_locked, this, dboard_iface::UNIT_TX));
     this->get_tx_subtree()->create<int>("gains"); //phony property so this dir exists
     this->get_tx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&rfx_xcvr::set_lo_freq, this, dboard_iface::UNIT_TX, _1))
+        .set_coercer(boost::bind(&rfx_xcvr::set_lo_freq, this, dboard_iface::UNIT_TX, boost::placeholders::_1))
         .set((_freq_range.start() + _freq_range.stop())/2.0);
     this->get_tx_subtree()->create<meta_range_t>("freq/range").set(_freq_range);
     this->get_tx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&rfx_xcvr::set_tx_ant, this, _1)).set(rfx_tx_antennas.at(0));
+        .add_coerced_subscriber(boost::bind(&rfx_xcvr::set_tx_ant, this, boost::placeholders::_1)).set(rfx_tx_antennas.at(0));
     this->get_tx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(rfx_tx_antennas);
     this->get_tx_subtree()->create<std::string>("connection").set("IQ");
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_sbx_common.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_sbx_common.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_sbx_common.cpp
@@ -149,17 +149,17 @@ sbx_xcvr::sbx_xcvr(ctor_args_t args) : x
         .set_publisher(boost::bind(&sbx_xcvr::get_locked, this, dboard_iface::UNIT_RX));
     for(const std::string &name:  sbx_rx_gain_ranges.keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&sbx_xcvr::set_rx_gain, this, _1, name))
+            .set_coercer(boost::bind(&sbx_xcvr::set_rx_gain, this, boost::placeholders::_1, name))
             .set(sbx_rx_gain_ranges[name].start());
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(sbx_rx_gain_ranges[name]);
     }
     this->get_rx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&sbx_xcvr::set_lo_freq, this, dboard_iface::UNIT_RX, _1))
+        .set_coercer(boost::bind(&sbx_xcvr::set_lo_freq, this, dboard_iface::UNIT_RX, boost::placeholders::_1))
         .set((freq_range.start() + freq_range.stop())/2.0);
     this->get_rx_subtree()->create<meta_range_t>("freq/range").set(freq_range);
     this->get_rx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&sbx_xcvr::set_rx_ant, this, _1))
+        .add_coerced_subscriber(boost::bind(&sbx_xcvr::set_rx_ant, this, boost::placeholders::_1))
         .set("RX2");
     this->get_rx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(sbx_rx_antennas);
@@ -190,17 +190,17 @@ sbx_xcvr::sbx_xcvr(ctor_args_t args) : x
         .set_publisher(boost::bind(&sbx_xcvr::get_locked, this, dboard_iface::UNIT_TX));
     for(const std::string &name:  sbx_tx_gain_ranges.keys()){
         this->get_tx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&sbx_xcvr::set_tx_gain, this, _1, name))
+            .set_coercer(boost::bind(&sbx_xcvr::set_tx_gain, this, boost::placeholders::_1, name))
             .set(sbx_tx_gain_ranges[name].start());
         this->get_tx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(sbx_tx_gain_ranges[name]);
     }
     this->get_tx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&sbx_xcvr::set_lo_freq, this, dboard_iface::UNIT_TX, _1))
+        .set_coercer(boost::bind(&sbx_xcvr::set_lo_freq, this, dboard_iface::UNIT_TX, boost::placeholders::_1))
         .set((freq_range.start() + freq_range.stop())/2.0);
     this->get_tx_subtree()->create<meta_range_t>("freq/range").set(freq_range);
     this->get_tx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&sbx_xcvr::set_tx_ant, this, _1))
+        .add_coerced_subscriber(boost::bind(&sbx_xcvr::set_tx_ant, this, boost::placeholders::_1))
         .set(sbx_tx_antennas.at(0));
     this->get_tx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(sbx_tx_antennas);
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_sbx_version3.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_sbx_version3.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_sbx_version3.cpp
@@ -20,8 +20,8 @@ using namespace boost::assign;
 sbx_xcvr::sbx_version3::sbx_version3(sbx_xcvr *_self_sbx_xcvr) {
     //register the handle to our base SBX class
     self_base = _self_sbx_xcvr;
-    _txlo = adf435x_iface::make_adf4350(boost::bind(&sbx_xcvr::sbx_version3::write_lo_regs, this, dboard_iface::UNIT_TX, _1));
-    _rxlo = adf435x_iface::make_adf4350(boost::bind(&sbx_xcvr::sbx_version3::write_lo_regs, this, dboard_iface::UNIT_RX, _1));
+    _txlo = adf435x_iface::make_adf4350(boost::bind(&sbx_xcvr::sbx_version3::write_lo_regs, this, dboard_iface::UNIT_TX, boost::placeholders::_1));
+    _rxlo = adf435x_iface::make_adf4350(boost::bind(&sbx_xcvr::sbx_version3::write_lo_regs, this, dboard_iface::UNIT_RX, boost::placeholders::_1));
 }
 
 sbx_xcvr::sbx_version3::~sbx_version3(void){
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_sbx_version4.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_sbx_version4.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_sbx_version4.cpp
@@ -20,8 +20,8 @@ using namespace boost::assign;
 sbx_xcvr::sbx_version4::sbx_version4(sbx_xcvr *_self_sbx_xcvr) {
     //register the handle to our base SBX class
     self_base = _self_sbx_xcvr;
-    _txlo = adf435x_iface::make_adf4351(boost::bind(&sbx_xcvr::sbx_version4::write_lo_regs, this, dboard_iface::UNIT_TX, _1));
-    _rxlo = adf435x_iface::make_adf4351(boost::bind(&sbx_xcvr::sbx_version4::write_lo_regs, this, dboard_iface::UNIT_RX, _1));
+    _txlo = adf435x_iface::make_adf4351(boost::bind(&sbx_xcvr::sbx_version4::write_lo_regs, this, dboard_iface::UNIT_TX, boost::placeholders::_1));
+    _rxlo = adf435x_iface::make_adf4351(boost::bind(&sbx_xcvr::sbx_version4::write_lo_regs, this, dboard_iface::UNIT_RX, boost::placeholders::_1));
 }
 
 
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_tvrx.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_tvrx.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_tvrx.cpp
@@ -180,12 +180,12 @@ tvrx::tvrx(ctor_args_t args) : rx_dboard
     this->get_rx_subtree()->create<int>("sensors"); //phony property so this dir exists
     for(const std::string &name:  get_tvrx_gain_ranges().keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&tvrx::set_gain, this, _1, name));
+            .set_coercer(boost::bind(&tvrx::set_gain, this, boost::placeholders::_1, name));
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(get_tvrx_gain_ranges()[name]);
     }
     this->get_rx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&tvrx::set_freq, this, _1));
+        .set_coercer(boost::bind(&tvrx::set_freq, this, boost::placeholders::_1));
     this->get_rx_subtree()->create<meta_range_t>("freq/range")
         .set(tvrx_freq_range);
     this->get_rx_subtree()->create<std::string>("antenna/value")
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_tvrx2.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_tvrx2.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_tvrx2.cpp
@@ -958,12 +958,12 @@ tvrx2::tvrx2(ctor_args_t args) : rx_dboa
         .set_publisher(boost::bind(&tvrx2::get_temp, this));
     for(const std::string &name:  tvrx2_gain_ranges.keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&tvrx2::set_gain, this, _1, name));
+            .set_coercer(boost::bind(&tvrx2::set_gain, this, boost::placeholders::_1, name));
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(tvrx2_gain_ranges[name]);
     }
     this->get_rx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&tvrx2::set_lo_freq, this, _1));
+        .set_coercer(boost::bind(&tvrx2::set_lo_freq, this, boost::placeholders::_1));
     this->get_rx_subtree()->create<meta_range_t>("freq/range")
         .set(tvrx2_freq_range);
     this->get_rx_subtree()->create<std::string>("antenna/value")
@@ -973,12 +973,12 @@ tvrx2::tvrx2(ctor_args_t args) : rx_dboa
     this->get_rx_subtree()->create<std::string>("connection")
         .set(tvrx2_sd_name_to_conn[get_subdev_name()]);
     this->get_rx_subtree()->create<bool>("enabled")
-        .set_coercer(boost::bind(&tvrx2::set_enabled, this, _1))
+        .set_coercer(boost::bind(&tvrx2::set_enabled, this, boost::placeholders::_1))
         .set(_enabled);
     this->get_rx_subtree()->create<bool>("use_lo_offset")
         .set(false);
     this->get_rx_subtree()->create<double>("bandwidth/value")
-        .set_coercer(boost::bind(&tvrx2::set_bandwidth, this, _1))
+        .set_coercer(boost::bind(&tvrx2::set_bandwidth, this, boost::placeholders::_1))
         .set(_bandwidth);
     this->get_rx_subtree()->create<meta_range_t>("bandwidth/range")
         .set(tvrx2_bandwidth_range);
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_ubx.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_ubx.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_ubx.cpp
@@ -395,10 +395,10 @@ public:
         // Initialize LOs
         if (_rev == 0)
         {
-            _txlo1 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO1, _1));
-            _txlo2 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO2, _1));
-            _rxlo1 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO1, _1));
-            _rxlo2 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO2, _1));
+            _txlo1 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO1, boost::placeholders::_1));
+            _txlo2 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO2, boost::placeholders::_1));
+            _rxlo1 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO1, boost::placeholders::_1));
+            _rxlo2 = max287x_iface::make<max2870>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO2, boost::placeholders::_1));
             std::vector<max287x_iface::sptr> los{_txlo1, _txlo2, _rxlo1, _rxlo2};
             for(max287x_iface::sptr lo:  los)
             {
@@ -409,10 +409,10 @@ public:
         }
         else if (_rev == 1 or _rev == 2)
         {
-            _txlo1 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO1, _1));
-            _txlo2 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO2, _1));
-            _rxlo1 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO1, _1));
-            _rxlo2 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO2, _1));
+            _txlo1 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO1, boost::placeholders::_1));
+            _txlo2 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, TXLO2, boost::placeholders::_1));
+            _rxlo1 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO1, boost::placeholders::_1));
+            _rxlo2 = max287x_iface::make<max2871>(boost::bind(&ubx_xcvr::write_spi_regs, this, RXLO2, boost::placeholders::_1));
             std::vector<max287x_iface::sptr> los{_txlo1, _txlo2, _rxlo1, _rxlo2};
             for(max287x_iface::sptr lo:  los)
             {
@@ -439,12 +439,12 @@ public:
         get_rx_subtree()->create<std::vector<std::string> >("power_mode/options")
             .set(ubx_power_modes);
         get_rx_subtree()->create<std::string>("power_mode/value")
-            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_power_mode, this, _1))
+            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_power_mode, this, boost::placeholders::_1))
             .set("performance");
         get_rx_subtree()->create<std::vector<std::string> >("xcvr_mode/options")
             .set(ubx_xcvr_modes);
         get_rx_subtree()->create<std::string>("xcvr_mode/value")
-            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_xcvr_mode, this, _1))
+            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_xcvr_mode, this, boost::placeholders::_1))
             .set("FDX");
         get_rx_subtree()->create<std::vector<std::string> >("temp_comp_mode/options")
             .set(ubx_temp_comp_modes);
@@ -456,12 +456,12 @@ public:
         get_tx_subtree()->create<std::vector<std::string> >("power_mode/options")
             .set(ubx_power_modes);
         get_tx_subtree()->create<std::string>("power_mode/value")
-            .add_coerced_subscriber(boost::bind(&uhd::property<std::string>::set, &get_rx_subtree()->access<std::string>("power_mode/value"), _1))
+            .add_coerced_subscriber(boost::bind(&uhd::property<std::string>::set, &get_rx_subtree()->access<std::string>("power_mode/value"), boost::placeholders::_1))
             .set_publisher(boost::bind(&uhd::property<std::string>::get, &get_rx_subtree()->access<std::string>("power_mode/value")));
         get_tx_subtree()->create<std::vector<std::string> >("xcvr_mode/options")
             .set(ubx_xcvr_modes);
         get_tx_subtree()->create<std::string>("xcvr_mode/value")
-            .add_coerced_subscriber(boost::bind(&uhd::property<std::string>::set, &get_rx_subtree()->access<std::string>("xcvr_mode/value"), _1))
+            .add_coerced_subscriber(boost::bind(&uhd::property<std::string>::set, &get_rx_subtree()->access<std::string>("xcvr_mode/value"), boost::placeholders::_1))
             .set_publisher(boost::bind(&uhd::property<std::string>::get, &get_rx_subtree()->access<std::string>("xcvr_mode/value")));
         get_tx_subtree()->create<std::vector<std::string> >("temp_comp_mode/options")
             .set(ubx_temp_comp_modes);
@@ -488,18 +488,18 @@ public:
         get_tx_subtree()->create<sensor_value_t>("sensors/lo_locked")
             .set_publisher(boost::bind(&ubx_xcvr::get_locked, this, "TXLO"));
         get_tx_subtree()->create<double>("gains/PGA0/value")
-            .set_coercer(boost::bind(&ubx_xcvr::set_tx_gain, this, _1)).set(0);
+            .set_coercer(boost::bind(&ubx_xcvr::set_tx_gain, this, boost::placeholders::_1)).set(0);
         get_tx_subtree()->create<meta_range_t>("gains/PGA0/range")
             .set(ubx_tx_gain_range);
         get_tx_subtree()->create<double>("freq/value")
-            .set_coercer(boost::bind(&ubx_xcvr::set_tx_freq, this, _1))
+            .set_coercer(boost::bind(&ubx_xcvr::set_tx_freq, this, boost::placeholders::_1))
             .set(ubx_freq_range.start());
         get_tx_subtree()->create<meta_range_t>("freq/range")
             .set(ubx_freq_range);
         get_tx_subtree()->create<std::vector<std::string> >("antenna/options")
             .set(ubx_tx_antennas);
         get_tx_subtree()->create<std::string>("antenna/value")
-            .set_coercer(boost::bind(&ubx_xcvr::set_tx_ant, this, _1))
+            .set_coercer(boost::bind(&ubx_xcvr::set_tx_ant, this, boost::placeholders::_1))
             .set(ubx_tx_antennas.at(0));
         get_tx_subtree()->create<std::string>("connection")
             .set("QI");
@@ -512,7 +512,7 @@ public:
         get_tx_subtree()->create<meta_range_t>("bandwidth/range")
             .set(freq_range_t(bw, bw));
         get_tx_subtree()->create<int64_t>("sync_delay")
-            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_sync_delay, this, true, _1))
+            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_sync_delay, this, true, boost::placeholders::_1))
             .set(0);
 
         ////////////////////////////////////////////////////////////////////
@@ -524,19 +524,19 @@ public:
         get_rx_subtree()->create<sensor_value_t>("sensors/lo_locked")
             .set_publisher(boost::bind(&ubx_xcvr::get_locked, this, "RXLO"));
         get_rx_subtree()->create<double>("gains/PGA0/value")
-            .set_coercer(boost::bind(&ubx_xcvr::set_rx_gain, this, _1))
+            .set_coercer(boost::bind(&ubx_xcvr::set_rx_gain, this, boost::placeholders::_1))
             .set(0);
         get_rx_subtree()->create<meta_range_t>("gains/PGA0/range")
             .set(ubx_rx_gain_range);
         get_rx_subtree()->create<double>("freq/value")
-            .set_coercer(boost::bind(&ubx_xcvr::set_rx_freq, this, _1))
+            .set_coercer(boost::bind(&ubx_xcvr::set_rx_freq, this, boost::placeholders::_1))
             .set(ubx_freq_range.start());
         get_rx_subtree()->create<meta_range_t>("freq/range")
             .set(ubx_freq_range);
         get_rx_subtree()->create<std::vector<std::string> >("antenna/options")
             .set(ubx_rx_antennas);
         get_rx_subtree()->create<std::string>("antenna/value")
-            .set_coercer(boost::bind(&ubx_xcvr::set_rx_ant, this, _1)).set("RX2");
+            .set_coercer(boost::bind(&ubx_xcvr::set_rx_ant, this, boost::placeholders::_1)).set("RX2");
         get_rx_subtree()->create<std::string>("connection")
             .set("IQ");
         get_rx_subtree()->create<bool>("enabled")
@@ -548,7 +548,7 @@ public:
         get_rx_subtree()->create<meta_range_t>("bandwidth/range")
             .set(freq_range_t(bw, bw));
         get_rx_subtree()->create<int64_t>("sync_delay")
-            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_sync_delay, this, false, _1))
+            .add_coerced_subscriber(boost::bind(&ubx_xcvr::set_sync_delay, this, false, boost::placeholders::_1))
             .set(0);
     }
 
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_common.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_wbx_common.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_common.cpp
@@ -62,14 +62,14 @@ wbx_base::wbx_base(ctor_args_t args) : x
         .set_publisher(boost::bind(&wbx_base::get_locked, this, dboard_iface::UNIT_RX));
     for(const std::string &name:  wbx_rx_gain_ranges.keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&wbx_base::set_rx_gain, this, _1, name))
+            .set_coercer(boost::bind(&wbx_base::set_rx_gain, this, boost::placeholders::_1, name))
             .set(wbx_rx_gain_ranges[name].start());
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(wbx_rx_gain_ranges[name]);
     }
     this->get_rx_subtree()->create<std::string>("connection").set("IQ");
     this->get_rx_subtree()->create<bool>("enabled")
-        .add_coerced_subscriber(boost::bind(&wbx_base::set_rx_enabled, this, _1))
+        .add_coerced_subscriber(boost::bind(&wbx_base::set_rx_enabled, this, boost::placeholders::_1))
         .set(true); //start enabled
     this->get_rx_subtree()->create<bool>("use_lo_offset").set(false);
 
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_simple.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_wbx_simple.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_simple.cpp
@@ -78,7 +78,7 @@ wbx_simple::wbx_simple(ctor_args_t args)
         std::string(str(boost::format("%s+GDB") % this->get_rx_subtree()->access<std::string>("name").get()
     )));
     this->get_rx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&wbx_simple::set_rx_ant, this, _1))
+        .add_coerced_subscriber(boost::bind(&wbx_simple::set_rx_ant, this, boost::placeholders::_1))
         .set("RX2");
     this->get_rx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(wbx_rx_antennas);
@@ -90,7 +90,7 @@ wbx_simple::wbx_simple(ctor_args_t args)
         std::string(str(boost::format("%s+GDB") % this->get_tx_subtree()->access<std::string>("name").get()
     )));
     this->get_tx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&wbx_simple::set_tx_ant, this, _1))
+        .add_coerced_subscriber(boost::bind(&wbx_simple::set_tx_ant, this, boost::placeholders::_1))
         .set(wbx_tx_antennas.at(0));
     this->get_tx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(wbx_tx_antennas);
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_version2.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_wbx_version2.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_version2.cpp
@@ -65,15 +65,15 @@ static double tx_pga0_gain_to_dac_volts(
 wbx_base::wbx_version2::wbx_version2(wbx_base *_self_wbx_base) {
     //register our handle on the primary wbx_base instance
     self_base = _self_wbx_base;
-    _txlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_TX, _1));
-    _rxlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_RX, _1));
+    _txlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_TX, boost::placeholders::_1));
+    _rxlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_RX, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // Register RX properties
     ////////////////////////////////////////////////////////////////////
     this->get_rx_subtree()->create<std::string>("name").set("WBXv2 RX");
     this->get_rx_subtree()->create<double>("freq/value")
-         .set_coercer(boost::bind(&wbx_base::wbx_version2::set_lo_freq, this, dboard_iface::UNIT_RX, _1))
+         .set_coercer(boost::bind(&wbx_base::wbx_version2::set_lo_freq, this, dboard_iface::UNIT_RX, boost::placeholders::_1))
          .set((wbx_v2_freq_range.start() + wbx_v2_freq_range.stop())/2.0);
     this->get_rx_subtree()->create<meta_range_t>("freq/range").set(wbx_v2_freq_range);
 
@@ -83,17 +83,17 @@ wbx_base::wbx_version2::wbx_version2(wbx
     this->get_tx_subtree()->create<std::string>("name").set("WBXv2 TX");
     for(const std::string &name:  wbx_v2_tx_gain_ranges.keys()){
         self_base->get_tx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&wbx_base::wbx_version2::set_tx_gain, this, _1, name))
+            .set_coercer(boost::bind(&wbx_base::wbx_version2::set_tx_gain, this, boost::placeholders::_1, name))
             .set(wbx_v2_tx_gain_ranges[name].start());
         self_base->get_tx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(wbx_v2_tx_gain_ranges[name]);
     }
     this->get_tx_subtree()->create<double>("freq/value")
-         .set_coercer(boost::bind(&wbx_base::wbx_version2::set_lo_freq, this, dboard_iface::UNIT_TX, _1))
+         .set_coercer(boost::bind(&wbx_base::wbx_version2::set_lo_freq, this, dboard_iface::UNIT_TX, boost::placeholders::_1))
          .set((wbx_v2_freq_range.start() + wbx_v2_freq_range.stop())/2.0);
     this->get_tx_subtree()->create<meta_range_t>("freq/range").set(wbx_v2_freq_range);
     this->get_tx_subtree()->create<bool>("enabled")
-        .add_coerced_subscriber(boost::bind(&wbx_base::wbx_version2::set_tx_enabled, this, _1))
+        .add_coerced_subscriber(boost::bind(&wbx_base::wbx_version2::set_tx_enabled, this, boost::placeholders::_1))
         .set(true); //start enabled
 
     //set attenuator control bits
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_version3.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_wbx_version3.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_version3.cpp
@@ -70,15 +70,15 @@ static int tx_pga0_gain_to_iobits(double
 wbx_base::wbx_version3::wbx_version3(wbx_base *_self_wbx_base) {
     //register our handle on the primary wbx_base instance
     self_base = _self_wbx_base;
-    _txlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_TX, _1));
-    _rxlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_RX, _1));
+    _txlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_TX, boost::placeholders::_1));
+    _rxlo = adf435x_iface::make_adf4350(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_RX, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // Register RX properties
     ////////////////////////////////////////////////////////////////////
     this->get_rx_subtree()->create<std::string>("name").set("WBXv3 RX");
     this->get_rx_subtree()->create<double>("freq/value")
-         .set_coercer(boost::bind(&wbx_base::wbx_version3::set_lo_freq, this, dboard_iface::UNIT_RX, _1))
+         .set_coercer(boost::bind(&wbx_base::wbx_version3::set_lo_freq, this, dboard_iface::UNIT_RX, boost::placeholders::_1))
          .set((wbx_v3_freq_range.start() + wbx_v3_freq_range.stop())/2.0);
     this->get_rx_subtree()->create<meta_range_t>("freq/range").set(wbx_v3_freq_range);
 
@@ -88,17 +88,17 @@ wbx_base::wbx_version3::wbx_version3(wbx
     this->get_tx_subtree()->create<std::string>("name").set("WBXv3 TX");
     for(const std::string &name:  wbx_v3_tx_gain_ranges.keys()){
         self_base->get_tx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&wbx_base::wbx_version3::set_tx_gain, this, _1, name))
+            .set_coercer(boost::bind(&wbx_base::wbx_version3::set_tx_gain, this, boost::placeholders::_1, name))
             .set(wbx_v3_tx_gain_ranges[name].start());
         self_base->get_tx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(wbx_v3_tx_gain_ranges[name]);
     }
     this->get_tx_subtree()->create<double>("freq/value")
-         .set_coercer(boost::bind(&wbx_base::wbx_version3::set_lo_freq, this, dboard_iface::UNIT_TX, _1))
+         .set_coercer(boost::bind(&wbx_base::wbx_version3::set_lo_freq, this, dboard_iface::UNIT_TX, boost::placeholders::_1))
          .set((wbx_v3_freq_range.start() + wbx_v3_freq_range.stop())/2.0);
     this->get_tx_subtree()->create<meta_range_t>("freq/range").set(wbx_v3_freq_range);
     this->get_tx_subtree()->create<bool>("enabled")
-        .add_coerced_subscriber(boost::bind(&wbx_base::wbx_version3::set_tx_enabled, this, _1))
+        .add_coerced_subscriber(boost::bind(&wbx_base::wbx_version3::set_tx_enabled, this, boost::placeholders::_1))
         .set(true); //start enabled
 
     //set attenuator control bits
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_version4.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_wbx_version4.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_wbx_version4.cpp
@@ -71,8 +71,8 @@ static int tx_pga0_gain_to_iobits(double
 wbx_base::wbx_version4::wbx_version4(wbx_base *_self_wbx_base) {
     //register our handle on the primary wbx_base instance
     self_base = _self_wbx_base;
-    _txlo = adf435x_iface::make_adf4351(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_TX, _1));
-    _rxlo = adf435x_iface::make_adf4351(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_RX, _1));
+    _txlo = adf435x_iface::make_adf4351(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_TX, boost::placeholders::_1));
+    _rxlo = adf435x_iface::make_adf4351(boost::bind(&wbx_base::wbx_versionx::write_lo_regs, this, dboard_iface::UNIT_RX, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // Register RX properties
@@ -82,7 +82,7 @@ wbx_base::wbx_version4::wbx_version4(wbx
     if(rx_id == 0x0063) this->get_rx_subtree()->create<std::string>("name").set("WBXv4 RX");
     else if(rx_id == 0x0081) this->get_rx_subtree()->create<std::string>("name").set("WBX-120 RX");
     this->get_rx_subtree()->create<double>("freq/value")
-         .set_coercer(boost::bind(&wbx_base::wbx_version4::set_lo_freq, this, dboard_iface::UNIT_RX, _1))
+         .set_coercer(boost::bind(&wbx_base::wbx_version4::set_lo_freq, this, dboard_iface::UNIT_RX, boost::placeholders::_1))
          .set((wbx_v4_freq_range.start() + wbx_v4_freq_range.stop())/2.0);
     this->get_rx_subtree()->create<meta_range_t>("freq/range").set(wbx_v4_freq_range);
 
@@ -95,17 +95,17 @@ wbx_base::wbx_version4::wbx_version4(wbx
     else if(rx_id == 0x0081) this->get_tx_subtree()->create<std::string>("name").set("WBX-120 TX");
     for(const std::string &name:  wbx_v4_tx_gain_ranges.keys()){
         self_base->get_tx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&wbx_base::wbx_version4::set_tx_gain, this, _1, name))
+            .set_coercer(boost::bind(&wbx_base::wbx_version4::set_tx_gain, this, boost::placeholders::_1, name))
             .set(wbx_v4_tx_gain_ranges[name].start());
         self_base->get_tx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(wbx_v4_tx_gain_ranges[name]);
     }
     this->get_tx_subtree()->create<double>("freq/value")
-         .set_coercer(boost::bind(&wbx_base::wbx_version4::set_lo_freq, this, dboard_iface::UNIT_TX, _1))
+         .set_coercer(boost::bind(&wbx_base::wbx_version4::set_lo_freq, this, dboard_iface::UNIT_TX, boost::placeholders::_1))
          .set((wbx_v4_freq_range.start() + wbx_v4_freq_range.stop())/2.0);
     this->get_tx_subtree()->create<meta_range_t>("freq/range").set(wbx_v4_freq_range);
     this->get_tx_subtree()->create<bool>("enabled")
-        .add_coerced_subscriber(boost::bind(&wbx_base::wbx_version4::set_tx_enabled, this, _1))
+        .add_coerced_subscriber(boost::bind(&wbx_base::wbx_version4::set_tx_enabled, this, boost::placeholders::_1))
         .set(true); //start enabled
 
     //set attenuator control bits
Index: uhd-3.15.0.0/host/lib/usrp/dboard/db_xcvr2450.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/db_xcvr2450.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/db_xcvr2450.cpp
@@ -227,18 +227,18 @@ xcvr2450::xcvr2450(ctor_args_t args) : x
         .set_publisher(boost::bind(&xcvr2450::get_rssi, this));
     for(const std::string &name:  xcvr_rx_gain_ranges.keys()){
         this->get_rx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&xcvr2450::set_rx_gain, this, _1, name))
+            .set_coercer(boost::bind(&xcvr2450::set_rx_gain, this, boost::placeholders::_1, name))
             .set(xcvr_rx_gain_ranges[name].start());
         this->get_rx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(xcvr_rx_gain_ranges[name]);
     }
     this->get_rx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&xcvr2450::set_lo_freq, this, _1))
+        .set_coercer(boost::bind(&xcvr2450::set_lo_freq, this, boost::placeholders::_1))
         .set(double(2.45e9));
     this->get_rx_subtree()->create<meta_range_t>("freq/range")
         .set(xcvr_freq_range);
     this->get_rx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&xcvr2450::set_rx_ant, this, _1))
+        .add_coerced_subscriber(boost::bind(&xcvr2450::set_rx_ant, this, boost::placeholders::_1))
         .set(xcvr_antennas.at(0));
     this->get_rx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(xcvr_antennas);
@@ -249,7 +249,7 @@ xcvr2450::xcvr2450(ctor_args_t args) : x
     this->get_rx_subtree()->create<bool>("use_lo_offset")
         .set(false);
     this->get_rx_subtree()->create<double>("bandwidth/value")
-        .set_coercer(boost::bind(&xcvr2450::set_rx_bandwidth, this, _1)) //complex bandpass bandwidth 
+        .set_coercer(boost::bind(&xcvr2450::set_rx_bandwidth, this, boost::placeholders::_1)) //complex bandpass bandwidth 
         .set(2.0*_rx_bandwidth); //_rx_bandwidth in lowpass, convert to complex bandpass
     this->get_rx_subtree()->create<meta_range_t>("bandwidth/range")
         .set(xcvr_rx_bandwidth_range);
@@ -263,18 +263,18 @@ xcvr2450::xcvr2450(ctor_args_t args) : x
         .set_publisher(boost::bind(&xcvr2450::get_locked, this));
     for(const std::string &name:  xcvr_tx_gain_ranges.keys()){
         this->get_tx_subtree()->create<double>("gains/"+name+"/value")
-            .set_coercer(boost::bind(&xcvr2450::set_tx_gain, this, _1, name))
+            .set_coercer(boost::bind(&xcvr2450::set_tx_gain, this, boost::placeholders::_1, name))
             .set(xcvr_tx_gain_ranges[name].start());
         this->get_tx_subtree()->create<meta_range_t>("gains/"+name+"/range")
             .set(xcvr_tx_gain_ranges[name]);
     }
     this->get_tx_subtree()->create<double>("freq/value")
-        .set_coercer(boost::bind(&xcvr2450::set_lo_freq, this, _1))
+        .set_coercer(boost::bind(&xcvr2450::set_lo_freq, this, boost::placeholders::_1))
         .set(double(2.45e9));
     this->get_tx_subtree()->create<meta_range_t>("freq/range")
         .set(xcvr_freq_range);
     this->get_tx_subtree()->create<std::string>("antenna/value")
-        .add_coerced_subscriber(boost::bind(&xcvr2450::set_tx_ant, this, _1))
+        .add_coerced_subscriber(boost::bind(&xcvr2450::set_tx_ant, this, boost::placeholders::_1))
         .set(xcvr_antennas.at(1));
     this->get_tx_subtree()->create<std::vector<std::string> >("antenna/options")
         .set(xcvr_antennas);
@@ -285,7 +285,7 @@ xcvr2450::xcvr2450(ctor_args_t args) : x
     this->get_tx_subtree()->create<bool>("use_lo_offset")
         .set(false);
     this->get_tx_subtree()->create<double>("bandwidth/value")
-        .set_coercer(boost::bind(&xcvr2450::set_tx_bandwidth, this, _1)) //complex bandpass bandwidth
+        .set_coercer(boost::bind(&xcvr2450::set_tx_bandwidth, this, boost::placeholders::_1)) //complex bandpass bandwidth
         .set(2.0*_tx_bandwidth); //_tx_bandwidth in lowpass, convert to complex bandpass
     this->get_tx_subtree()->create<meta_range_t>("bandwidth/range")
         .set(xcvr_tx_bandwidth_range);
Index: uhd-3.15.0.0/host/lib/usrp/dboard/eiscat/eiscat_radio_ctrl_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/dboard/eiscat/eiscat_radio_ctrl_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/dboard/eiscat/eiscat_radio_ctrl_impl.cpp
@@ -301,7 +301,7 @@ UHD_RFNOC_RADIO_BLOCK_CONSTRUCTOR(eiscat
     UHD_ASSERT_THROW(not _tree->exists("tick_rate"));
     _tree->create<double>("tick_rate")
         .set(EISCAT_TICK_RATE)
-        .set_coercer(boost::bind(&eiscat_radio_ctrl_impl::set_rate, this, _1))
+        .set_coercer(boost::bind(&eiscat_radio_ctrl_impl::set_rate, this, boost::placeholders::_1))
     ;
 }
 
Index: uhd-3.15.0.0/host/lib/usrp/n230/n230_stream_manager.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/n230/n230_stream_manager.cpp
+++ uhd-3.15.0.0/host/lib/usrp/n230/n230_stream_manager.cpp
@@ -121,7 +121,7 @@ rx_streamer::sptr n230_stream_manager::g
         //bind requires a zero_copy_if::sptr to add a streamer->xport lifetime dependency
         my_streamer->set_xport_chan_get_buff(
             stream_i,
-            boost::bind(&zero_copy_if::get_recv_buff, xport, _1),
+            boost::bind(&zero_copy_if::get_recv_buff, xport, boost::placeholders::_1),
             true /*flush*/
         );
 
@@ -143,7 +143,7 @@ rx_streamer::sptr n230_stream_manager::g
         //handle_rx_flowctrl is static and has no lifetime issues
         boost::shared_ptr<rx_fc_cache_t> fc_cache(new rx_fc_cache_t());
         my_streamer->set_xport_handle_flowctrl(
-            stream_i, boost::bind(&n230_stream_manager::_handle_rx_flowctrl, sid.get(), xport, fc_cache, _1),
+            stream_i, boost::bind(&n230_stream_manager::_handle_rx_flowctrl, sid.get(), xport, fc_cache, boost::placeholders::_1),
             fc_handle_window,
             true/*init*/
         );
@@ -264,11 +264,11 @@ tx_streamer::sptr n230_stream_manager::g
         //task (sptr) is required to add  a streamer->async-handler lifetime dependency
         my_streamer->set_xport_chan_get_buff(
             stream_i,
-            boost::bind(&n230_stream_manager::_get_tx_buff_with_flowctrl, task, fc_cache, xport, fc_window, _1)
+            boost::bind(&n230_stream_manager::_get_tx_buff_with_flowctrl, task, fc_cache, xport, fc_window, boost::placeholders::_1)
         );
         //Give the streamer a functor handled received async messages
         my_streamer->set_async_receiver(
-            boost::bind(&async_md_queue_t::pop_with_timed_wait, async_md, _1, _2)
+            boost::bind(&async_md_queue_t::pop_with_timed_wait, async_md, boost::placeholders::_1, _2)
         );
         my_streamer->set_xport_chan_sid(stream_i, true, sid.get());
         my_streamer->set_enable_trailer(false); //TODO not implemented trailer support yet
Index: uhd-3.15.0.0/host/lib/usrp/usrp1/usrp1_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/usrp1/usrp1_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/usrp1/usrp1_impl.cpp
@@ -176,7 +176,7 @@ usrp1_impl::usrp1_impl(const device_addr
     );
     _iface = usrp1_iface::make(_fx2_ctrl);
     _soft_time_ctrl = soft_time_ctrl::make(
-        boost::bind(&usrp1_impl::rx_stream_on_off, this, _1)
+        boost::bind(&usrp1_impl::rx_stream_on_off, this, boost::placeholders::_1)
     );
     _dbc["A"]; _dbc["B"]; //ensure that keys exist
 
@@ -201,13 +201,13 @@ usrp1_impl::usrp1_impl(const device_addr
     const fs_path mb_path = "/mboards/0";
     _tree->create<std::string>(mb_path / "name").set("USRP1");
     _tree->create<std::string>(mb_path / "load_eeprom")
-        .add_coerced_subscriber(boost::bind(&fx2_ctrl::usrp_load_eeprom, _fx2_ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&fx2_ctrl::usrp_load_eeprom, _fx2_ctrl, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // create user-defined control objects
     ////////////////////////////////////////////////////////////////////
     _tree->create<std::pair<uint8_t, uint32_t> >(mb_path / "user" / "regs")
-        .add_coerced_subscriber(boost::bind(&usrp1_impl::set_reg, this, _1));
+        .add_coerced_subscriber(boost::bind(&usrp1_impl::set_reg, this, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // setup the mboard eeprom
@@ -216,7 +216,7 @@ usrp1_impl::usrp1_impl(const device_addr
     const mboard_eeprom_t mb_eeprom = this->get_mb_eeprom(_fx2_ctrl);
     _tree->create<mboard_eeprom_t>(mb_path / "eeprom")
         .set(mb_eeprom)
-        .add_coerced_subscriber(boost::bind(&usrp1_impl::set_mb_eeprom, this, _1));
+        .add_coerced_subscriber(boost::bind(&usrp1_impl::set_mb_eeprom, this, boost::placeholders::_1));
 
     ////////////////////////////////////////////////////////////////////
     // create clock control objects
@@ -240,7 +240,7 @@ usrp1_impl::usrp1_impl(const device_addr
     }
     UHD_LOGGER_INFO("USRP1") << boost::format("Using FPGA clock rate of %fMHz...") % (_master_clock_rate/1e6) ;
     _tree->create<double>(mb_path / "tick_rate")
-        .add_coerced_subscriber(boost::bind(&usrp1_impl::update_tick_rate, this, _1))
+        .add_coerced_subscriber(boost::bind(&usrp1_impl::update_tick_rate, this, boost::placeholders::_1))
         .set(_master_clock_rate);
 
     ////////////////////////////////////////////////////////////////////
@@ -253,12 +253,12 @@ usrp1_impl::usrp1_impl(const device_addr
         _tree->create<std::string>(rx_codec_path / "name").set("ad9522");
         _tree->create<meta_range_t>(rx_codec_path / "gains/pga/range").set(usrp1_codec_ctrl::rx_pga_gain_range);
         _tree->create<double>(rx_codec_path / "gains/pga/value")
-            .set_coercer(boost::bind(&usrp1_impl::update_rx_codec_gain, this, db, _1))
+            .set_coercer(boost::bind(&usrp1_impl::update_rx_codec_gain, this, db, boost::placeholders::_1))
             .set(0.0);
         _tree->create<std::string>(tx_codec_path / "name").set("ad9522");
         _tree->create<meta_range_t>(tx_codec_path / "gains/pga/range").set(usrp1_codec_ctrl::tx_pga_gain_range);
         _tree->create<double>(tx_codec_path / "gains/pga/value")
-            .add_coerced_subscriber(boost::bind(&usrp1_codec_ctrl::set_tx_pga_gain, _dbc[db].codec, _1))
+            .add_coerced_subscriber(boost::bind(&usrp1_codec_ctrl::set_tx_pga_gain, _dbc[db].codec, boost::placeholders::_1))
             .set_publisher(boost::bind(&usrp1_codec_ctrl::get_tx_pga_gain, _dbc[db].codec))
             .set(0.0);
     }
@@ -274,18 +274,18 @@ usrp1_impl::usrp1_impl(const device_addr
     ////////////////////////////////////////////////////////////////////
     _tree->create<subdev_spec_t>(mb_path / "rx_subdev_spec")
         .set(subdev_spec_t())
-        .add_coerced_subscriber(boost::bind(&usrp1_impl::update_rx_subdev_spec, this, _1));
+        .add_coerced_subscriber(boost::bind(&usrp1_impl::update_rx_subdev_spec, this, boost::placeholders::_1));
     _tree->create<subdev_spec_t>(mb_path / "tx_subdev_spec")
         .set(subdev_spec_t())
-        .add_coerced_subscriber(boost::bind(&usrp1_impl::update_tx_subdev_spec, this, _1));
+        .add_coerced_subscriber(boost::bind(&usrp1_impl::update_tx_subdev_spec, this, boost::placeholders::_1));
 
     for(const std::string &db:  _dbc.keys()){
         const fs_path rx_fe_path = mb_path / "rx_frontends" / db;
         _tree->create<std::complex<double> >(rx_fe_path / "dc_offset" / "value")
-            .set_coercer(boost::bind(&usrp1_impl::set_rx_dc_offset, this, db, _1))
+            .set_coercer(boost::bind(&usrp1_impl::set_rx_dc_offset, this, db, boost::placeholders::_1))
             .set(std::complex<double>(0.0, 0.0));
         _tree->create<bool>(rx_fe_path / "dc_offset" / "enable")
-            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_enb_rx_dc_offset, this, db, _1))
+            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_enb_rx_dc_offset, this, db, boost::placeholders::_1))
             .set(true);
     }
 
@@ -299,16 +299,16 @@ usrp1_impl::usrp1_impl(const device_addr
             .set_publisher(boost::bind(&usrp1_impl::get_rx_dsp_host_rates, this));
         _tree->create<double>(rx_dsp_path / "rate/value")
             .set(1e6) //some default rate
-            .set_coercer(boost::bind(&usrp1_impl::update_rx_samp_rate, this, dspno, _1));
+            .set_coercer(boost::bind(&usrp1_impl::update_rx_samp_rate, this, dspno, boost::placeholders::_1));
         _tree->create<double>(rx_dsp_path / "freq/value")
-            .set_coercer(boost::bind(&usrp1_impl::update_rx_dsp_freq, this, dspno, _1));
+            .set_coercer(boost::bind(&usrp1_impl::update_rx_dsp_freq, this, dspno, boost::placeholders::_1));
         _tree->create<meta_range_t>(rx_dsp_path / "freq/range")
             .set_publisher(boost::bind(&usrp1_impl::get_rx_dsp_freq_range, this));
         _tree->create<stream_cmd_t>(rx_dsp_path / "stream_cmd");
         if (dspno == 0){
             //only add_coerced_subscriber the callback for dspno 0 since it will stream all dsps
             _tree->access<stream_cmd_t>(rx_dsp_path / "stream_cmd")
-                .add_coerced_subscriber(boost::bind(&soft_time_ctrl::issue_stream_cmd, _soft_time_ctrl, _1));
+                .add_coerced_subscriber(boost::bind(&soft_time_ctrl::issue_stream_cmd, _soft_time_ctrl, boost::placeholders::_1));
         }
     }
 
@@ -322,9 +322,9 @@ usrp1_impl::usrp1_impl(const device_addr
             .set_publisher(boost::bind(&usrp1_impl::get_tx_dsp_host_rates, this));
         _tree->create<double>(tx_dsp_path / "rate/value")
             .set(1e6) //some default rate
-            .set_coercer(boost::bind(&usrp1_impl::update_tx_samp_rate, this, dspno, _1));
+            .set_coercer(boost::bind(&usrp1_impl::update_tx_samp_rate, this, dspno, boost::placeholders::_1));
         _tree->create<double>(tx_dsp_path / "freq/value")
-            .set_coercer(boost::bind(&usrp1_impl::update_tx_dsp_freq, this, dspno, _1));
+            .set_coercer(boost::bind(&usrp1_impl::update_tx_dsp_freq, this, dspno, boost::placeholders::_1));
         _tree->create<meta_range_t>(tx_dsp_path / "freq/range")
             .set_publisher(boost::bind(&usrp1_impl::get_tx_dsp_freq_range, this));
     }
@@ -334,7 +334,7 @@ usrp1_impl::usrp1_impl(const device_addr
     ////////////////////////////////////////////////////////////////////
     _tree->create<time_spec_t>(mb_path / "time/now")
         .set_publisher(boost::bind(&soft_time_ctrl::get_time, _soft_time_ctrl))
-        .add_coerced_subscriber(boost::bind(&soft_time_ctrl::set_time, _soft_time_ctrl, _1));
+        .add_coerced_subscriber(boost::bind(&soft_time_ctrl::set_time, _soft_time_ctrl, boost::placeholders::_1));
 
     _tree->create<std::vector<std::string> >(mb_path / "clock_source/options").set(std::vector<std::string>(1, "internal"));
     _tree->create<std::vector<std::string> >(mb_path / "time_source/options").set(std::vector<std::string>(1, "none"));
@@ -358,13 +358,13 @@ usrp1_impl::usrp1_impl(const device_addr
         //create the properties and register subscribers
         _tree->create<dboard_eeprom_t>(mb_path / "dboards" / db/ "rx_eeprom")
             .set(rx_db_eeprom)
-            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_db_eeprom, this, db, "rx", _1));
+            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_db_eeprom, this, db, "rx", boost::placeholders::_1));
         _tree->create<dboard_eeprom_t>(mb_path / "dboards" / db/ "tx_eeprom")
             .set(tx_db_eeprom)
-            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_db_eeprom, this, db, "tx", _1));
+            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_db_eeprom, this, db, "tx", boost::placeholders::_1));
         _tree->create<dboard_eeprom_t>(mb_path / "dboards" / db/ "gdb_eeprom")
             .set(gdb_eeprom)
-            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_db_eeprom, this, db, "gdb", _1));
+            .add_coerced_subscriber(boost::bind(&usrp1_impl::set_db_eeprom, this, db, "gdb", boost::placeholders::_1));
 
         //create a new dboard interface and manager
         dboard_iface::sptr dboard_iface = make_dboard_iface(
Index: uhd-3.15.0.0/host/lib/usrp/usrp2/io_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/usrp2/io_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/usrp2/io_impl.cpp
@@ -458,7 +458,7 @@ rx_streamer::sptr usrp2_impl::get_rx_str
                     &zero_copy_if::get_recv_buff, _mbc[mb].rx_dsp_xports[dsp], _1
                 ), true /*flush*/);
                 my_streamer->set_issue_stream_cmd(chan_i, boost::bind(
-                    &rx_dsp_core_200::issue_stream_command, _mbc[mb].rx_dsps[dsp], _1));
+                    &rx_dsp_core_200::issue_stream_command, _mbc[mb].rx_dsps[dsp], boost::placeholders::_1));
                 _mbc[mb].rx_streamers[dsp] = my_streamer; //store weak pointer
                 break;
             }
@@ -528,7 +528,7 @@ tx_streamer::sptr usrp2_impl::get_tx_str
                 my_streamer->set_xport_chan_get_buff(chan_i, boost::bind(
                     &usrp2_impl::io_impl::get_send_buff, _io_impl.get(), abs, _1
                 ));
-                my_streamer->set_async_receiver(boost::bind(&bounded_buffer<async_metadata_t>::pop_with_timed_wait, &(_io_impl->async_msg_fifo), _1, _2));
+                my_streamer->set_async_receiver(boost::bind(&bounded_buffer<async_metadata_t>::pop_with_timed_wait, &(_io_impl->async_msg_fifo), boost::placeholders::_1, _2));
                 _mbc[mb].tx_streamers[dsp] = my_streamer; //store weak pointer
                 break;
             }
Index: uhd-3.15.0.0/host/lib/usrp/x300/x300_radio_ctrl_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/x300/x300_radio_ctrl_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp/x300/x300_radio_ctrl_impl.cpp
@@ -151,7 +151,7 @@ UHD_RFNOC_RADIO_BLOCK_CONSTRUCTOR(x300_r
     _tree->create<meta_range_t>("rx_codecs" / _radio_slot / "gains" / "digital" / "range")
         .set(meta_range_t(0, 6.0, 0.5));
     _tree->create<double>("rx_codecs" / _radio_slot / "gains" / "digital" / "value")
-        .add_coerced_subscriber(boost::bind(&x300_adc_ctrl::set_gain, _adc, _1))
+        .add_coerced_subscriber(boost::bind(&x300_adc_ctrl::set_gain, _adc, boost::placeholders::_1))
         .set(0);
 
     ////////////////////////////////////////////////////////////////
@@ -187,7 +187,7 @@ UHD_RFNOC_RADIO_BLOCK_CONSTRUCTOR(x300_r
         if (_tree->exists(fs_path("time") / "cmd")) {
             _tree->access<time_spec_t>(fs_path("time") / "cmd")
                 .add_coerced_subscriber(
-                    boost::bind(&x300_radio_ctrl_impl::set_fe_cmd_time, this, _1, i));
+                    boost::bind(&x300_radio_ctrl_impl::set_fe_cmd_time, this, boost::placeholders::_1, i));
         }
     }
 
@@ -820,7 +820,7 @@ void x300_radio_ctrl_impl::setup_radio(u
                 this,
                 zpu_i2c,
                 (BASE_ADDR | addr),
-                _1));
+                boost::placeholders::_1));
     }
 
     // create a new dboard interface
@@ -894,7 +894,7 @@ void x300_radio_ctrl_impl::setup_radio(u
                                           / _rx_fe_map[i].db_fe_name / "antenna"
                                           / "value")
                     .add_desired_subscriber(boost::bind(
-                        &x300_radio_ctrl_impl::_update_atr_leds, this, _1, i));
+                        &x300_radio_ctrl_impl::_update_atr_leds, this, boost::placeholders::_1, i));
                 _update_atr_leds(_tree
                                      ->access<std::string>(db_path / "rx_frontends"
                                                            / _rx_fe_map[i].db_fe_name
@@ -921,7 +921,7 @@ void x300_radio_ctrl_impl::setup_radio(u
                             this,
                             db_path,
                             _root_path / "tx_fe_corrections" / _tx_fe_map[i].db_fe_name,
-                            _1));
+                            boost::placeholders::_1));
             }
         }
     }
@@ -938,7 +938,7 @@ void x300_radio_ctrl_impl::setup_radio(u
                             this,
                             db_path,
                             _root_path / "rx_fe_corrections" / _tx_fe_map[i].db_fe_name,
-                            _1));
+                            boost::placeholders::_1));
             }
         }
     }
Index: uhd-3.15.0.0/host/lib/usrp_clock/octoclock/octoclock_impl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp_clock/octoclock/octoclock_impl.cpp
+++ uhd-3.15.0.0/host/lib/usrp_clock/octoclock/octoclock_impl.cpp
@@ -232,7 +232,7 @@ octoclock_impl::octoclock_impl(const dev
         _oc_dict[oc].eeprom = octoclock_eeprom_t(_oc_dict[oc].ctrl_xport, _proto_ver);
         _tree->create<octoclock_eeprom_t>(oc_path / "eeprom")
             .set(_oc_dict[oc].eeprom)
-            .add_coerced_subscriber(boost::bind(&octoclock_impl::_set_eeprom, this, oc, _1));
+            .add_coerced_subscriber(boost::bind(&octoclock_impl::_set_eeprom, this, oc, boost::placeholders::_1));
 
         ////////////////////////////////////////////////////////////////////
         // Initialize non-GPSDO sensors
Index: uhd-3.15.0.0/host/tests/nocscript_expr_test.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/tests/nocscript_expr_test.cpp
+++ uhd-3.15.0.0/host/tests/nocscript_expr_test.cpp
@@ -103,13 +103,13 @@ expression_literal variable_get_value(co
 BOOST_AUTO_TEST_CASE(test_variables)
 {
     BOOST_REQUIRE_THROW(expression_variable v_fail("foo", // Invalid token
-                            boost::bind(&variable_get_type, _1),
-                            boost::bind(&variable_get_value, _1)),
+                            boost::bind(&variable_get_type, boost::placeholders::_1),
+                            boost::bind(&variable_get_value, boost::placeholders::_1)),
         uhd::assertion_error);
 
     expression_variable v("$spp", // The token
-        boost::bind(&variable_get_type, _1), // type-getter
-        boost::bind(&variable_get_value, _1) // value-getter
+        boost::bind(&variable_get_type, boost::placeholders::_1), // type-getter
+        boost::bind(&variable_get_value, boost::placeholders::_1) // value-getter
     );
     BOOST_CHECK_EQUAL(v.infer_type(), expression::TYPE_INT);
     BOOST_CHECK_EQUAL(v.eval().get_int(), 5);
@@ -125,14 +125,14 @@ BOOST_AUTO_TEST_CASE(test_container)
     BOOST_REQUIRE_EQUAL(l_false->to_bool(), false);
     expression_variable::sptr l_boolvar =
         boost::make_shared<expression_variable>("$is_true",
-            boost::bind(&variable_get_type, _1),
-            boost::bind(&variable_get_value, _1));
+            boost::bind(&variable_get_type, boost::placeholders::_1),
+            boost::bind(&variable_get_value, boost::placeholders::_1));
 
     // This will throw anytime it's evaluated:
     expression_variable::sptr l_failvar =
         boost::make_shared<expression_variable>("$does_not_exist",
-            boost::bind(&variable_get_type, _1),
-            boost::bind(&variable_get_value, _1));
+            boost::bind(&variable_get_type, boost::placeholders::_1),
+            boost::bind(&variable_get_value, boost::placeholders::_1));
 
     expression_container c;
     std::cout << "One true, OR: " << std::endl;
@@ -395,8 +395,8 @@ BOOST_AUTO_TEST_CASE(test_sptrs)
     BOOST_CHECK(c->eval().get_bool());
 
     expression_variable::sptr v = expression_variable::make("$spp",
-        boost::bind(&variable_get_type, _1), // type-getter
-        boost::bind(&variable_get_value, _1) // value-getter
+        boost::bind(&variable_get_type, boost::placeholders::_1), // type-getter
+        boost::bind(&variable_get_value, boost::placeholders::_1) // value-getter
     );
 
     c->add(v);
Index: uhd-3.15.0.0/host/tests/nocscript_ftable_test.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/tests/nocscript_ftable_test.cpp
+++ uhd-3.15.0.0/host/tests/nocscript_ftable_test.cpp
@@ -104,7 +104,7 @@ BOOST_AUTO_TEST_CASE(test_add_funcs)
     expression_function::argtype_list_type add_int_args{
         expression::TYPE_INT, expression::TYPE_INT};
     ft->register_function("ADD_PLUS_2",
-        boost::bind(&add_plus2_int, _1),
+        boost::bind(&add_plus2_int, boost::placeholders::_1),
         expression::TYPE_INT,
         add_int_args);
 
@@ -139,9 +139,9 @@ BOOST_AUTO_TEST_CASE(test_conditionals)
 {
     function_table::sptr ft = function_table::make();
     ft->register_function(
-        "DUMMY", boost::bind(&dummy_true, _1), expression::TYPE_BOOL, no_args);
+        "DUMMY", boost::bind(&dummy_true, boost::placeholders::_1), expression::TYPE_BOOL, no_args);
     ft->register_function(
-        "DUMMY_F", boost::bind(&dummy_false, _1), expression::TYPE_BOOL, no_args);
+        "DUMMY_F", boost::bind(&dummy_false, boost::placeholders::_1), expression::TYPE_BOOL, no_args);
     BOOST_REQUIRE(ft->function_exists("DUMMY", no_args));
     BOOST_REQUIRE(ft->function_exists("DUMMY_F", no_args));
 
Index: uhd-3.15.0.0/host/tests/nocscript_parser_test.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/tests/nocscript_parser_test.cpp
+++ uhd-3.15.0.0/host/tests/nocscript_parser_test.cpp
@@ -51,7 +51,7 @@ expression_literal variable_get_value(co
 #define SETUP_FT_AND_PARSER()                         \
     function_table::sptr ft = function_table::make(); \
     parser::sptr p          = parser::make(           \
-        ft, boost::bind(&variable_get_type, _1), boost::bind(&variable_get_value, _1));
+        ft, boost::bind(&variable_get_type, boost::placeholders::_1), boost::bind(&variable_get_value, boost::placeholders::_1));
 
 BOOST_AUTO_TEST_CASE(test_fail)
 {
@@ -131,7 +131,7 @@ BOOST_AUTO_TEST_CASE(test_multi_commmand
     SETUP_FT_AND_PARSER();
 
     ft->register_function(
-        "DUMMY", boost::bind(&dummy_false, _1), expression::TYPE_BOOL, no_args);
+        "DUMMY", boost::bind(&dummy_false, boost::placeholders::_1), expression::TYPE_BOOL, no_args);
 
     dummy_false_counter = 0;
     p->create_expr_tree("DUMMY(), DUMMY(), DUMMY()")->eval();
Index: uhd-3.15.0.0/host/tests/property_test.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/tests/property_test.cpp
+++ uhd-3.15.0.0/host/tests/property_test.cpp
@@ -69,7 +69,7 @@ BOOST_AUTO_TEST_CASE(test_prop_with_desi
     uhd::property<int>& prop      = tree->create<int>("/");
 
     setter_type setter;
-    prop.add_desired_subscriber(boost::bind(&setter_type::doit, &setter, _1));
+    prop.add_desired_subscriber(boost::bind(&setter_type::doit, &setter, boost::placeholders::_1));
 
     prop.set(42);
     BOOST_CHECK_EQUAL(prop.get_desired(), 42);
@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(test_prop_with_coer
     uhd::property<int>& prop      = tree->create<int>("/");
 
     setter_type setter;
-    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &setter, _1));
+    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &setter, boost::placeholders::_1));
 
     prop.set(42);
     BOOST_CHECK_EQUAL(prop.get_desired(), 42);
@@ -107,8 +107,8 @@ BOOST_AUTO_TEST_CASE(test_prop_manual_co
     uhd::property<int>& prop = tree->create<int>("/", uhd::property_tree::MANUAL_COERCE);
 
     setter_type dsetter, csetter;
-    prop.add_desired_subscriber(boost::bind(&setter_type::doit, &dsetter, _1));
-    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &csetter, _1));
+    prop.add_desired_subscriber(boost::bind(&setter_type::doit, &dsetter, boost::placeholders::_1));
+    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &csetter, boost::placeholders::_1));
 
     BOOST_CHECK_EQUAL(dsetter._x, 0);
     BOOST_CHECK_EQUAL(csetter._x, 0);
@@ -153,7 +153,7 @@ BOOST_AUTO_TEST_CASE(test_prop_with_publ
     prop.set_publisher(boost::bind(&getter_type::doit, &getter));
 
     setter_type setter;
-    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &setter, _1));
+    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &setter, boost::placeholders::_1));
 
     getter._x = 42;
     prop.set(0);
@@ -172,10 +172,10 @@ BOOST_AUTO_TEST_CASE(test_prop_with_coer
     uhd::property<int>& prop      = tree->create<int>("/");
 
     setter_type setter;
-    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &setter, _1));
+    prop.add_coerced_subscriber(boost::bind(&setter_type::doit, &setter, boost::placeholders::_1));
 
     coercer_type coercer;
-    prop.set_coercer(boost::bind(&coercer_type::doit, &coercer, _1));
+    prop.set_coercer(boost::bind(&coercer_type::doit, &coercer, boost::placeholders::_1));
 
     prop.set(42);
     BOOST_CHECK_EQUAL(prop.get(), 40);
Index: uhd-3.15.0.0/host/examples/rfnoc_rx_to_file.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/examples/rfnoc_rx_to_file.cpp
+++ uhd-3.15.0.0/host/examples/rfnoc_rx_to_file.cpp
@@ -385,10 +385,10 @@ int UHD_SAFE_MAIN(int argc, char* argv[]
     if (not vm.count("skip-lo")) {
         // TODO
         // check_locked_sensor(usrp->get_rx_sensor_names(0), "lo_locked",
-        // boost::bind(&uhd::usrp::multi_usrp::get_rx_sensor, usrp, _1, radio_id),
+        // boost::bind(&uhd::usrp::multi_usrp::get_rx_sensor, usrp, boost::placeholders::_1, radio_id),
         // setup_time); if (ref == "external")
         // check_locked_sensor(usrp->get_mboard_sensor_names(0), "ref_locked",
-        // boost::bind(&uhd::usrp::multi_usrp::get_mboard_sensor, usrp, _1, radio_id),
+        // boost::bind(&uhd::usrp::multi_usrp::get_mboard_sensor, usrp, boost::placeholders::_1, radio_id),
         // setup_time);
     }
 
Index: uhd-3.15.0.0/host/lib/rfnoc/block_ctrl_base.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/rfnoc/block_ctrl_base.cpp
+++ uhd-3.15.0.0/host/lib/rfnoc/block_ctrl_base.cpp
@@ -271,7 +271,7 @@ timed_wb_iface::sptr block_ctrl_base::ge
 {
     return boost::make_shared<wb_iface_adapter>(_ctrl_ifaces[block_port],
         boost::bind(&block_ctrl_base::get_command_tick_rate, this, block_port),
-        boost::bind(&block_ctrl_base::set_command_time, this, _1, block_port),
+        boost::bind(&block_ctrl_base::set_command_time, this, boost::placeholders::_1, block_port),
         boost::bind(&block_ctrl_base::get_command_time, this, block_port));
 }
 
Index: uhd-3.15.0.0/host/lib/rfnoc/rate_node_ctrl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/rfnoc/rate_node_ctrl.cpp
+++ uhd-3.15.0.0/host/lib/rfnoc/rate_node_ctrl.cpp
@@ -29,7 +29,7 @@ double rate_node_ctrl::get_input_samp_ra
 {
     try {
         return find_downstream_unique_property<rate_node_ctrl, double>(
-            boost::bind(_get_input_samp_rate, _1, _2), RATE_UNDEFINED);
+            boost::bind(_get_input_samp_rate, boost::placeholders::_1, _2), RATE_UNDEFINED);
     } catch (const uhd::runtime_error& ex) {
         throw uhd::runtime_error(
             str(boost::format("Multiple sampling rates downstream of %s: %s.")
@@ -42,7 +42,7 @@ double rate_node_ctrl::get_output_samp_r
 {
     try {
         return find_upstream_unique_property<rate_node_ctrl, double>(
-            boost::bind(_get_output_samp_rate, _1, _2), RATE_UNDEFINED);
+            boost::bind(_get_output_samp_rate, boost::placeholders::_1, _2), RATE_UNDEFINED);
     } catch (const uhd::runtime_error& ex) {
         throw uhd::runtime_error(
             str(boost::format("Multiple sampling rates upstream of %s: %s.") % unique_id()
Index: uhd-3.15.0.0/host/lib/rfnoc/scalar_node_ctrl.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/rfnoc/scalar_node_ctrl.cpp
+++ uhd-3.15.0.0/host/lib/rfnoc/scalar_node_ctrl.cpp
@@ -28,7 +28,7 @@ double scalar_node_ctrl::get_input_scale
 {
     try {
         return find_downstream_unique_property<scalar_node_ctrl, double>(
-            boost::bind(_get_input_factor, _1, _2), SCALE_UNDEFINED);
+            boost::bind(_get_input_factor, boost::placeholders::_1, _2), SCALE_UNDEFINED);
     } catch (const uhd::runtime_error& ex) {
         throw uhd::runtime_error(
             str(boost::format("Multiple scaling factors rates downstream of %s: %s.")
@@ -41,7 +41,7 @@ double scalar_node_ctrl::get_output_scal
 {
     try {
         return find_upstream_unique_property<scalar_node_ctrl, double>(
-            boost::bind(_get_output_factor, _1, _2), SCALE_UNDEFINED);
+            boost::bind(_get_output_factor, boost::placeholders::_1, _2), SCALE_UNDEFINED);
     } catch (const uhd::runtime_error& ex) {
         throw uhd::runtime_error(
             str(boost::format("Multiple scaling factors rates upstream of %s: %s.")
Index: uhd-3.15.0.0/host/lib/usrp/b200/b200_iface.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/b200/b200_iface.cpp
+++ uhd-3.15.0.0/host/lib/usrp/b200/b200_iface.cpp
@@ -217,7 +217,7 @@ public:
             file_reader.read(
                 boost::bind(
                     &b200_iface_impl::fx3_control_write, this,
-                    FX3_FIRMWARE_LOAD, _1, _2, _3, _4, 0
+                    FX3_FIRMWARE_LOAD, boost::placeholders::_1, _2, _3, _4, 0
                 )
             );
         } catch (const uhd::io_error &e) {
Index: uhd-3.15.0.0/host/lib/usrp/multi_usrp.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/usrp/multi_usrp.cpp
+++ uhd-3.15.0.0/host/lib/usrp/multi_usrp.cpp
@@ -216,7 +216,7 @@ static gain_fcns_t make_gain_fcns_from_s
     gain_fcns_t gain_fcns;
     gain_fcns.get_range = boost::bind(&get_gain_range, subtree);
     gain_fcns.get_value = boost::bind(&get_gain_value, subtree);
-    gain_fcns.set_value = boost::bind(&set_gain_value, subtree, _1);
+    gain_fcns.set_value = boost::bind(&set_gain_value, subtree, boost::placeholders::_1);
     return gain_fcns;
 }
 
Index: uhd-3.15.0.0/host/lib/utils/gain_group.cpp
===================================================================
--- uhd-3.15.0.0.orig/host/lib/utils/gain_group.cpp
+++ uhd-3.15.0.0/host/lib/utils/gain_group.cpp
@@ -118,7 +118,7 @@ public:
         }
         std::sort(
             indexes_step_size_dec.begin(), indexes_step_size_dec.end(),
-            boost::bind(&compare_by_step_size, _1, _2, all_fcns)
+            boost::bind(&compare_by_step_size, boost::placeholders::_1, _2, all_fcns)
         );
         UHD_ASSERT_THROW(
             all_fcns.at(indexes_step_size_dec.front()).get_range().step() >=
