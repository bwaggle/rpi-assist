From 46f4223e86e22afbc4da1416215ba589a9d29802 Mon Sep 17 00:00:00 2001
From: marionm <mathis.marion@grenoble-inp.org>
Date: Wed, 25 Aug 2021 15:18:41 +0200
Subject: [PATCH] Manually add headers generated by wbgen2

---
 .../mockturtle/hw/mockturtle_cpu_csr.h        | 181 ++++++++++++++++++
 .../include/mockturtle/hw/mockturtle_cpu_lr.h | 127 ++++++++++++
 2 files changed, 308 insertions(+)
 create mode 100644 software/include/mockturtle/hw/mockturtle_cpu_csr.h
 create mode 100644 software/include/mockturtle/hw/mockturtle_cpu_lr.h

diff --git a/software/include/mockturtle/hw/mockturtle_cpu_csr.h b/software/include/mockturtle/hw/mockturtle_cpu_csr.h
new file mode 100644
index 0000000..93545bb
--- /dev/null
+++ b/software/include/mockturtle/hw/mockturtle_cpu_csr.h
@@ -0,0 +1,181 @@
+/*
+  Register definitions for slave core: Mock Turtle CPU Control/Status registers block
+
+  * File           : mockturtle_cpu_csr.h
+  * Author         : auto-generated by wbgen2 from ../../../../hdl/rtl//cpu/mt_cpu_csr.wb
+  * Created        : Wed Aug 25 11:06:57 2021
+  * Standard       : ANSI C
+
+    THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE ../../../../hdl/rtl//cpu/mt_cpu_csr.wb
+    DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
+
+*/
+
+#ifndef __WBGEN2_REGDEFS_MT_CPU_CSR_WB
+#define __WBGEN2_REGDEFS_MT_CPU_CSR_WB
+
+#ifdef __KERNEL__
+#include <linux/types.h>
+#else
+#include <inttypes.h>
+#endif
+
+#if defined( __GNUC__)
+#define PACKED __attribute__ ((packed))
+#else
+#error "Unsupported compiler?"
+#endif
+
+#ifndef __WBGEN2_MACROS_DEFINED__
+#define __WBGEN2_MACROS_DEFINED__
+#define WBGEN2_GEN_MASK(offset, size) (((1<<(size))-1) << (offset))
+#define WBGEN2_GEN_WRITE(value, offset, size) (((value) & ((1<<(size))-1)) << (offset))
+#define WBGEN2_GEN_READ(reg, offset, size) (((reg) >> (offset)) & ((1<<(size))-1))
+#define WBGEN2_SIGN_EXTEND(value, bits) (((value) & (1<<bits) ? ~((1<<(bits))-1): 0 ) | (value))
+#endif
+
+
+/* definitions for register: Core Reset Register */
+
+/* definitions for register: Core Notification Interrupt Register */
+
+/* definitions for register: Core 0-3 Notification Value Register */
+
+/* definitions for register: Core 4-7 Notification Value Register */
+
+/* definitions for register: SMEM Operation Select */
+
+/* definitions for register: HMQ Select Register */
+
+/* definitions for field: Queue select in reg: HMQ Select Register */
+#define MT_CPU_CSR_HMQ_SEL_QUEUE_MASK         WBGEN2_GEN_MASK(0, 3)
+#define MT_CPU_CSR_HMQ_SEL_QUEUE_SHIFT        0
+#define MT_CPU_CSR_HMQ_SEL_QUEUE_W(value)     WBGEN2_GEN_WRITE(value, 0, 3)
+#define MT_CPU_CSR_HMQ_SEL_QUEUE_R(reg)       WBGEN2_GEN_READ(reg, 0, 3)
+
+/* definitions for field: Core select in reg: HMQ Select Register */
+#define MT_CPU_CSR_HMQ_SEL_CORE_MASK          WBGEN2_GEN_MASK(8, 3)
+#define MT_CPU_CSR_HMQ_SEL_CORE_SHIFT         8
+#define MT_CPU_CSR_HMQ_SEL_CORE_W(value)      WBGEN2_GEN_WRITE(value, 8, 3)
+#define MT_CPU_CSR_HMQ_SEL_CORE_R(reg)        WBGEN2_GEN_READ(reg, 8, 3)
+
+/* definitions for register: HMQ IN Status Core 0-3 Register */
+
+/* definitions for register: HMQ IN Status Core 4-7 Register */
+
+/* definitions for register: HMQ OUT Status Core 0-3 Register */
+
+/* definitions for register: HMQ OUT Status Core 4-7 Register */
+
+/* definitions for register: HMQ IN Interrupt Enable Core 0-3 Register */
+
+/* definitions for register: HMQ IN Interrupt Enable Core 4-7 Register */
+
+/* definitions for register: HMQ OUT Interrupt Enable Core 0-3 Register */
+
+/* definitions for register: HMQ OUT Interrupt Enable Core 4-7 Register */
+
+/* definitions for register: Core Select Register */
+
+/* definitions for register: Core Upload Address Register */
+
+/* definitions for field: Address to access in selected core's local memory. in reg: Core Upload Address Register */
+#define MT_CPU_CSR_UADDR_ADDR_MASK            WBGEN2_GEN_MASK(0, 20)
+#define MT_CPU_CSR_UADDR_ADDR_SHIFT           0
+#define MT_CPU_CSR_UADDR_ADDR_W(value)        WBGEN2_GEN_WRITE(value, 0, 20)
+#define MT_CPU_CSR_UADDR_ADDR_R(reg)          WBGEN2_GEN_READ(reg, 0, 20)
+
+/* definitions for register: Core Upload Data Register */
+
+/* definitions for register: Core Serial Console Message Register */
+
+/* definitions for field: Serial console message byte for the selected core in reg: Core Serial Console Message Register */
+#define MT_CPU_CSR_UART_MSG_DATA_MASK         WBGEN2_GEN_MASK(0, 8)
+#define MT_CPU_CSR_UART_MSG_DATA_SHIFT        0
+#define MT_CPU_CSR_UART_MSG_DATA_W(value)     WBGEN2_GEN_WRITE(value, 0, 8)
+#define MT_CPU_CSR_UART_MSG_DATA_R(reg)       WBGEN2_GEN_READ(reg, 0, 8)
+
+/* definitions for register: Core Serial Console Message Poll Register */
+
+/* definitions for field: Serial console message data available in reg: Core Serial Console Message Poll Register */
+#define MT_CPU_CSR_UART_POLL_READY_MASK       WBGEN2_GEN_MASK(0, 8)
+#define MT_CPU_CSR_UART_POLL_READY_SHIFT      0
+#define MT_CPU_CSR_UART_POLL_READY_W(value)   WBGEN2_GEN_WRITE(value, 0, 8)
+#define MT_CPU_CSR_UART_POLL_READY_R(reg)     WBGEN2_GEN_READ(reg, 0, 8)
+
+/* definitions for register: Core Serial Console Message Interrupt Mask Register */
+
+/* definitions for field: Per-Core Serial console message Interrupt Enable in reg: Core Serial Console Message Interrupt Mask Register */
+#define MT_CPU_CSR_UART_IMSK_ENABLE_MASK      WBGEN2_GEN_MASK(0, 8)
+#define MT_CPU_CSR_UART_IMSK_ENABLE_SHIFT     0
+#define MT_CPU_CSR_UART_IMSK_ENABLE_W(value)  WBGEN2_GEN_WRITE(value, 0, 8)
+#define MT_CPU_CSR_UART_IMSK_ENABLE_R(reg)    WBGEN2_GEN_READ(reg, 0, 8)
+
+/* definitions for register: Debug Interface Status Register */
+
+/* definitions for register: Debug Interface Force Register */
+
+/* definitions for register: Debug Interface Instruction Ready Register */
+
+/* definitions for register: Debug Interface Core[0] Instruction Register */
+
+/* definitions for register: Debug Interface Core[1] Instruction Register */
+
+/* definitions for register: Debug Interface Core[0] Mailbox Data Register */
+
+/* definitions for register: Debug Interface Core[1] Mailbox Data Register */
+/* [0x0]: REG Core Reset Register */
+#define MT_CPU_CSR_REG_RESET 0x00000000
+/* [0x4]: REG Core Notification Interrupt Register */
+#define MT_CPU_CSR_REG_INT 0x00000004
+/* [0x8]: REG Core 0-3 Notification Value Register */
+#define MT_CPU_CSR_REG_INT_VAL_LO 0x00000008
+/* [0xc]: REG Core 4-7 Notification Value Register */
+#define MT_CPU_CSR_REG_INT_VAL_HI 0x0000000c
+/* [0x18]: REG SMEM Operation Select */
+#define MT_CPU_CSR_REG_SMEM_OP 0x00000018
+/* [0x1c]: REG HMQ Select Register */
+#define MT_CPU_CSR_REG_HMQ_SEL 0x0000001c
+/* [0x40]: REG HMQ IN Status Core 0-3 Register */
+#define MT_CPU_CSR_REG_HMQI_STATUS_LO 0x00000040
+/* [0x48]: REG HMQ IN Status Core 4-7 Register */
+#define MT_CPU_CSR_REG_HMQI_STATUS_HI 0x00000048
+/* [0x60]: REG HMQ OUT Status Core 0-3 Register */
+#define MT_CPU_CSR_REG_HMQO_STATUS_LO 0x00000060
+/* [0x68]: REG HMQ OUT Status Core 4-7 Register */
+#define MT_CPU_CSR_REG_HMQO_STATUS_HI 0x00000068
+/* [0x80]: REG HMQ IN Interrupt Enable Core 0-3 Register */
+#define MT_CPU_CSR_REG_HMQI_INTEN_LO 0x00000080
+/* [0x88]: REG HMQ IN Interrupt Enable Core 4-7 Register */
+#define MT_CPU_CSR_REG_HMQI_INTEN_HI 0x00000088
+/* [0x90]: REG HMQ OUT Interrupt Enable Core 0-3 Register */
+#define MT_CPU_CSR_REG_HMQO_INTEN_LO 0x00000090
+/* [0x98]: REG HMQ OUT Interrupt Enable Core 4-7 Register */
+#define MT_CPU_CSR_REG_HMQO_INTEN_HI 0x00000098
+/* [0xc0]: REG Core Select Register */
+#define MT_CPU_CSR_REG_CORE_SEL 0x000000c0
+/* [0xc4]: REG Core Upload Address Register */
+#define MT_CPU_CSR_REG_UADDR 0x000000c4
+/* [0xc8]: REG Core Upload Data Register */
+#define MT_CPU_CSR_REG_UDATA 0x000000c8
+/* [0x100]: REG Core Serial Console Message Register */
+#define MT_CPU_CSR_REG_UART_MSG 0x00000100
+/* [0x104]: REG Core Serial Console Message Poll Register */
+#define MT_CPU_CSR_REG_UART_POLL 0x00000104
+/* [0x108]: REG Core Serial Console Message Interrupt Mask Register */
+#define MT_CPU_CSR_REG_UART_IMSK 0x00000108
+/* [0x180]: REG Debug Interface Status Register */
+#define MT_CPU_CSR_REG_DBG_STATUS 0x00000180
+/* [0x184]: REG Debug Interface Force Register */
+#define MT_CPU_CSR_REG_DBG_FORCE 0x00000184
+/* [0x188]: REG Debug Interface Instruction Ready Register */
+#define MT_CPU_CSR_REG_DBG_INSN_READY 0x00000188
+/* [0x18c]: REG Debug Interface Core[0] Instruction Register */
+#define MT_CPU_CSR_REG_DBG_CORE0_INSN 0x0000018c
+/* [0x190]: REG Debug Interface Core[1] Instruction Register */
+#define MT_CPU_CSR_REG_DBG_CORE1_INSN 0x00000190
+/* [0x194]: REG Debug Interface Core[0] Mailbox Data Register */
+#define MT_CPU_CSR_REG_DBG_CORE0_MBX 0x00000194
+/* [0x198]: REG Debug Interface Core[1] Mailbox Data Register */
+#define MT_CPU_CSR_REG_DBG_CORE1_MBX 0x00000198
+#endif
diff --git a/software/include/mockturtle/hw/mockturtle_cpu_lr.h b/software/include/mockturtle/hw/mockturtle_cpu_lr.h
new file mode 100644
index 0000000..2999f6c
--- /dev/null
+++ b/software/include/mockturtle/hw/mockturtle_cpu_lr.h
@@ -0,0 +1,127 @@
+/*
+  Register definitions for slave core: Mock Turtle CPU Per-Core Local Registers
+
+  * File           : mockturtle_cpu_lr.h
+  * Author         : auto-generated by wbgen2 from ../../../../hdl/rtl//cpu/mt_cpu_lr.wb
+  * Created        : Wed Aug 25 11:06:57 2021
+  * Standard       : ANSI C
+
+    THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE ../../../../hdl/rtl//cpu/mt_cpu_lr.wb
+    DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
+
+*/
+
+#ifndef __WBGEN2_REGDEFS_MT_CPU_LR_WB
+#define __WBGEN2_REGDEFS_MT_CPU_LR_WB
+
+#ifdef __KERNEL__
+#include <linux/types.h>
+#else
+#include <inttypes.h>
+#endif
+
+#if defined( __GNUC__)
+#define PACKED __attribute__ ((packed))
+#else
+#error "Unsupported compiler?"
+#endif
+
+#ifndef __WBGEN2_MACROS_DEFINED__
+#define __WBGEN2_MACROS_DEFINED__
+#define WBGEN2_GEN_MASK(offset, size) (((1<<(size))-1) << (offset))
+#define WBGEN2_GEN_WRITE(value, offset, size) (((value) & ((1<<(size))-1)) << (offset))
+#define WBGEN2_GEN_READ(reg, offset, size) (((reg) >> (offset)) & ((1<<(size))-1))
+#define WBGEN2_SIGN_EXTEND(value, bits) (((value) & (1<<bits) ? ~((1<<(bits))-1): 0 ) | (value))
+#endif
+
+
+/* definitions for register: Status Register */
+
+/* definitions for field: ID (number) of the CPU core owning this register. in reg: Status Register */
+#define MT_CPU_LR_STAT_CORE_ID_MASK           WBGEN2_GEN_MASK(0, 4)
+#define MT_CPU_LR_STAT_CORE_ID_SHIFT          0
+#define MT_CPU_LR_STAT_CORE_ID_W(value)       WBGEN2_GEN_WRITE(value, 0, 4)
+#define MT_CPU_LR_STAT_CORE_ID_R(reg)         WBGEN2_GEN_READ(reg, 0, 4)
+
+/* definitions for register: Notification Interrupt Register */
+
+/* definitions for register: Serial Console Output */
+
+/* definitions for register: HMQ Status Register */
+
+/* definitions for field: HMQ IN Slot Status in reg: HMQ Status Register */
+#define MT_CPU_LR_HMQ_STAT_IN_MASK            WBGEN2_GEN_MASK(0, 8)
+#define MT_CPU_LR_HMQ_STAT_IN_SHIFT           0
+#define MT_CPU_LR_HMQ_STAT_IN_W(value)        WBGEN2_GEN_WRITE(value, 0, 8)
+#define MT_CPU_LR_HMQ_STAT_IN_R(reg)          WBGEN2_GEN_READ(reg, 0, 8)
+
+/* definitions for field: HMQ OUT Slot Status in reg: HMQ Status Register */
+#define MT_CPU_LR_HMQ_STAT_OUT_MASK           WBGEN2_GEN_MASK(16, 8)
+#define MT_CPU_LR_HMQ_STAT_OUT_SHIFT          16
+#define MT_CPU_LR_HMQ_STAT_OUT_W(value)       WBGEN2_GEN_WRITE(value, 16, 8)
+#define MT_CPU_LR_HMQ_STAT_OUT_R(reg)         WBGEN2_GEN_READ(reg, 16, 8)
+
+/* definitions for register: RMQ Status Register */
+
+/* definitions for field: RMQ IN Slot Status in reg: RMQ Status Register */
+#define MT_CPU_LR_RMQ_STAT_IN_MASK            WBGEN2_GEN_MASK(0, 8)
+#define MT_CPU_LR_RMQ_STAT_IN_SHIFT           0
+#define MT_CPU_LR_RMQ_STAT_IN_W(value)        WBGEN2_GEN_WRITE(value, 0, 8)
+#define MT_CPU_LR_RMQ_STAT_IN_R(reg)          WBGEN2_GEN_READ(reg, 0, 8)
+
+/* definitions for field: RMQ OUT Slot Status in reg: RMQ Status Register */
+#define MT_CPU_LR_RMQ_STAT_OUT_MASK           WBGEN2_GEN_MASK(16, 8)
+#define MT_CPU_LR_RMQ_STAT_OUT_SHIFT          16
+#define MT_CPU_LR_RMQ_STAT_OUT_W(value)       WBGEN2_GEN_WRITE(value, 16, 8)
+#define MT_CPU_LR_RMQ_STAT_OUT_R(reg)         WBGEN2_GEN_READ(reg, 16, 8)
+
+/* definitions for register: White Rabbit Status Register */
+
+/* definitions for field: WR Link Up in reg: White Rabbit Status Register */
+#define MT_CPU_LR_WR_STAT_LINK_OK             WBGEN2_GEN_MASK(0, 1)
+
+/* definitions for field: WR Time OK in reg: White Rabbit Status Register */
+#define MT_CPU_LR_WR_STAT_TIME_OK             WBGEN2_GEN_MASK(1, 1)
+
+/* definitions for field: WR Aux Clock OK in reg: White Rabbit Status Register */
+#define MT_CPU_LR_WR_STAT_AUX_CLOCK_OK_MASK   WBGEN2_GEN_MASK(8, 8)
+#define MT_CPU_LR_WR_STAT_AUX_CLOCK_OK_SHIFT  8
+#define MT_CPU_LR_WR_STAT_AUX_CLOCK_OK_W(value) WBGEN2_GEN_WRITE(value, 8, 8)
+#define MT_CPU_LR_WR_STAT_AUX_CLOCK_OK_R(reg) WBGEN2_GEN_READ(reg, 8, 8)
+
+/* definitions for register: TAI Cycles */
+
+/* definitions for register: TAI Seconds */
+
+/* definitions for register: Delay Counter Register */
+
+/* definitions for register: GPIO Input */
+
+/* definitions for register: GPIO Set */
+
+/* definitions for register: GPIO Clear */
+/* [0x0]: REG Status Register */
+#define MT_CPU_LR_REG_STAT 0x00000000
+/* [0x4]: REG Notification Interrupt Register */
+#define MT_CPU_LR_REG_NTF_INT 0x00000004
+/* [0x8]: REG Serial Console Output */
+#define MT_CPU_LR_REG_UART_CHR 0x00000008
+/* [0x40]: REG HMQ Status Register */
+#define MT_CPU_LR_REG_HMQ_STAT 0x00000040
+/* [0x44]: REG RMQ Status Register */
+#define MT_CPU_LR_REG_RMQ_STAT 0x00000044
+/* [0x80]: REG White Rabbit Status Register */
+#define MT_CPU_LR_REG_WR_STAT 0x00000080
+/* [0x84]: REG TAI Cycles */
+#define MT_CPU_LR_REG_TAI_CYCLES 0x00000084
+/* [0x88]: REG TAI Seconds */
+#define MT_CPU_LR_REG_TAI_SEC 0x00000088
+/* [0x8c]: REG Delay Counter Register */
+#define MT_CPU_LR_REG_DELAY_CNT 0x0000008c
+/* [0xc0]: REG GPIO Input */
+#define MT_CPU_LR_REG_GPIO_IN 0x000000c0
+/* [0xc4]: REG GPIO Set */
+#define MT_CPU_LR_REG_GPIO_SET 0x000000c4
+/* [0xc8]: REG GPIO Clear */
+#define MT_CPU_LR_REG_GPIO_CLEAR 0x000000c8
+#endif
-- 
2.30.2

